/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package safariami.manager.prismtoken1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-03")
public class Token implements org.apache.thrift.TBase<Token, Token._Fields>, java.io.Serializable, Cloneable, Comparable<Token> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Token");

  private static final org.apache.thrift.protocol.TField DRN_FIELD_DESC = new org.apache.thrift.protocol.TField("drn", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAN_FIELD_DESC = new org.apache.thrift.protocol.TField("pan", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EA_FIELD_DESC = new org.apache.thrift.protocol.TField("ea", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField TCT_FIELD_DESC = new org.apache.thrift.protocol.TField("tct", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SGC_FIELD_DESC = new org.apache.thrift.protocol.TField("sgc", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField KRN_FIELD_DESC = new org.apache.thrift.protocol.TField("krn", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField TI_FIELD_DESC = new org.apache.thrift.protocol.TField("ti", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField TOKEN_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenClass", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("subclass", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField TRANSFER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transferAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField IS_RESERVED_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("isReservedTid", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField NEW_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("newConfig", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField STS_UNIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stsUnitName", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SCALED_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("scaledAmount", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SCALED_UNIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scaledUnitName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TOKEN_DEC_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenDec", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField TOKEN_HEX_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenHex", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField ID_SM_FIELD_DESC = new org.apache.thrift.protocol.TField("idSm", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField VK_KCV_FIELD_DESC = new org.apache.thrift.protocol.TField("vkKcv", org.apache.thrift.protocol.TType.STRING, (short)41);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TokenStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TokenTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String drn; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pan; // required
  public short ea; // required
  public short tct; // required
  public int sgc; // required
  public short krn; // required
  public short ti; // required
  public short tokenClass; // required
  public short subclass; // required
  public int tid; // required
  public double transferAmount; // required
  public boolean isReservedTid; // required
  public @org.apache.thrift.annotation.Nullable MeterConfigAdvice newConfig; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String stsUnitName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String scaledAmount; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String scaledUnitName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tokenDec; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tokenHex; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String idSm; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String vkKcv; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DRN((short)1, "drn"),
    PAN((short)2, "pan"),
    EA((short)3, "ea"),
    TCT((short)4, "tct"),
    SGC((short)5, "sgc"),
    KRN((short)6, "krn"),
    TI((short)7, "ti"),
    TOKEN_CLASS((short)10, "tokenClass"),
    SUBCLASS((short)11, "subclass"),
    TID((short)12, "tid"),
    TRANSFER_AMOUNT((short)13, "transferAmount"),
    IS_RESERVED_TID((short)14, "isReservedTid"),
    NEW_CONFIG((short)15, "newConfig"),
    DESCRIPTION((short)20, "description"),
    STS_UNIT_NAME((short)21, "stsUnitName"),
    SCALED_AMOUNT((short)22, "scaledAmount"),
    SCALED_UNIT_NAME((short)23, "scaledUnitName"),
    TOKEN_DEC((short)30, "tokenDec"),
    TOKEN_HEX((short)31, "tokenHex"),
    ID_SM((short)40, "idSm"),
    VK_KCV((short)41, "vkKcv");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DRN
          return DRN;
        case 2: // PAN
          return PAN;
        case 3: // EA
          return EA;
        case 4: // TCT
          return TCT;
        case 5: // SGC
          return SGC;
        case 6: // KRN
          return KRN;
        case 7: // TI
          return TI;
        case 10: // TOKEN_CLASS
          return TOKEN_CLASS;
        case 11: // SUBCLASS
          return SUBCLASS;
        case 12: // TID
          return TID;
        case 13: // TRANSFER_AMOUNT
          return TRANSFER_AMOUNT;
        case 14: // IS_RESERVED_TID
          return IS_RESERVED_TID;
        case 15: // NEW_CONFIG
          return NEW_CONFIG;
        case 20: // DESCRIPTION
          return DESCRIPTION;
        case 21: // STS_UNIT_NAME
          return STS_UNIT_NAME;
        case 22: // SCALED_AMOUNT
          return SCALED_AMOUNT;
        case 23: // SCALED_UNIT_NAME
          return SCALED_UNIT_NAME;
        case 30: // TOKEN_DEC
          return TOKEN_DEC;
        case 31: // TOKEN_HEX
          return TOKEN_HEX;
        case 40: // ID_SM
          return ID_SM;
        case 41: // VK_KCV
          return VK_KCV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EA_ISSET_ID = 0;
  private static final int __TCT_ISSET_ID = 1;
  private static final int __SGC_ISSET_ID = 2;
  private static final int __KRN_ISSET_ID = 3;
  private static final int __TI_ISSET_ID = 4;
  private static final int __TOKENCLASS_ISSET_ID = 5;
  private static final int __SUBCLASS_ISSET_ID = 6;
  private static final int __TID_ISSET_ID = 7;
  private static final int __TRANSFERAMOUNT_ISSET_ID = 8;
  private static final int __ISRESERVEDTID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NEW_CONFIG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DRN, new org.apache.thrift.meta_data.FieldMetaData("drn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAN, new org.apache.thrift.meta_data.FieldMetaData("pan", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EA, new org.apache.thrift.meta_data.FieldMetaData("ea", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TCT, new org.apache.thrift.meta_data.FieldMetaData("tct", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SGC, new org.apache.thrift.meta_data.FieldMetaData("sgc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KRN, new org.apache.thrift.meta_data.FieldMetaData("krn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TI, new org.apache.thrift.meta_data.FieldMetaData("ti", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TOKEN_CLASS, new org.apache.thrift.meta_data.FieldMetaData("tokenClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("subclass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSFER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transferAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_RESERVED_TID, new org.apache.thrift.meta_data.FieldMetaData("isReservedTid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEW_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("newConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigAdvice.class)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STS_UNIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("stsUnitName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCALED_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("scaledAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCALED_UNIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("scaledUnitName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_DEC, new org.apache.thrift.meta_data.FieldMetaData("tokenDec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_HEX, new org.apache.thrift.meta_data.FieldMetaData("tokenHex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_SM, new org.apache.thrift.meta_data.FieldMetaData("idSm", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VK_KCV, new org.apache.thrift.meta_data.FieldMetaData("vkKcv", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Token.class, metaDataMap);
  }

  public Token() {
  }

  public Token(
    java.lang.String drn,
    java.lang.String pan,
    short ea,
    short tct,
    int sgc,
    short krn,
    short ti,
    short tokenClass,
    short subclass,
    int tid,
    double transferAmount,
    boolean isReservedTid,
    java.lang.String description,
    java.lang.String stsUnitName,
    java.lang.String scaledAmount,
    java.lang.String scaledUnitName,
    java.lang.String tokenDec,
    java.lang.String tokenHex,
    java.lang.String idSm,
    java.lang.String vkKcv)
  {
    this();
    this.drn = drn;
    this.pan = pan;
    this.ea = ea;
    setEaIsSet(true);
    this.tct = tct;
    setTctIsSet(true);
    this.sgc = sgc;
    setSgcIsSet(true);
    this.krn = krn;
    setKrnIsSet(true);
    this.ti = ti;
    setTiIsSet(true);
    this.tokenClass = tokenClass;
    setTokenClassIsSet(true);
    this.subclass = subclass;
    setSubclassIsSet(true);
    this.tid = tid;
    setTidIsSet(true);
    this.transferAmount = transferAmount;
    setTransferAmountIsSet(true);
    this.isReservedTid = isReservedTid;
    setIsReservedTidIsSet(true);
    this.description = description;
    this.stsUnitName = stsUnitName;
    this.scaledAmount = scaledAmount;
    this.scaledUnitName = scaledUnitName;
    this.tokenDec = tokenDec;
    this.tokenHex = tokenHex;
    this.idSm = idSm;
    this.vkKcv = vkKcv;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Token(Token other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDrn()) {
      this.drn = other.drn;
    }
    if (other.isSetPan()) {
      this.pan = other.pan;
    }
    this.ea = other.ea;
    this.tct = other.tct;
    this.sgc = other.sgc;
    this.krn = other.krn;
    this.ti = other.ti;
    this.tokenClass = other.tokenClass;
    this.subclass = other.subclass;
    this.tid = other.tid;
    this.transferAmount = other.transferAmount;
    this.isReservedTid = other.isReservedTid;
    if (other.isSetNewConfig()) {
      this.newConfig = new MeterConfigAdvice(other.newConfig);
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetStsUnitName()) {
      this.stsUnitName = other.stsUnitName;
    }
    if (other.isSetScaledAmount()) {
      this.scaledAmount = other.scaledAmount;
    }
    if (other.isSetScaledUnitName()) {
      this.scaledUnitName = other.scaledUnitName;
    }
    if (other.isSetTokenDec()) {
      this.tokenDec = other.tokenDec;
    }
    if (other.isSetTokenHex()) {
      this.tokenHex = other.tokenHex;
    }
    if (other.isSetIdSm()) {
      this.idSm = other.idSm;
    }
    if (other.isSetVkKcv()) {
      this.vkKcv = other.vkKcv;
    }
  }

  public Token deepCopy() {
    return new Token(this);
  }

  @Override
  public void clear() {
    this.drn = null;
    this.pan = null;
    setEaIsSet(false);
    this.ea = 0;
    setTctIsSet(false);
    this.tct = 0;
    setSgcIsSet(false);
    this.sgc = 0;
    setKrnIsSet(false);
    this.krn = 0;
    setTiIsSet(false);
    this.ti = 0;
    setTokenClassIsSet(false);
    this.tokenClass = 0;
    setSubclassIsSet(false);
    this.subclass = 0;
    setTidIsSet(false);
    this.tid = 0;
    setTransferAmountIsSet(false);
    this.transferAmount = 0.0;
    setIsReservedTidIsSet(false);
    this.isReservedTid = false;
    this.newConfig = null;
    this.description = null;
    this.stsUnitName = null;
    this.scaledAmount = null;
    this.scaledUnitName = null;
    this.tokenDec = null;
    this.tokenHex = null;
    this.idSm = null;
    this.vkKcv = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDrn() {
    return this.drn;
  }

  public Token setDrn(@org.apache.thrift.annotation.Nullable java.lang.String drn) {
    this.drn = drn;
    return this;
  }

  public void unsetDrn() {
    this.drn = null;
  }

  /** Returns true if field drn is set (has been assigned a value) and false otherwise */
  public boolean isSetDrn() {
    return this.drn != null;
  }

  public void setDrnIsSet(boolean value) {
    if (!value) {
      this.drn = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPan() {
    return this.pan;
  }

  public Token setPan(@org.apache.thrift.annotation.Nullable java.lang.String pan) {
    this.pan = pan;
    return this;
  }

  public void unsetPan() {
    this.pan = null;
  }

  /** Returns true if field pan is set (has been assigned a value) and false otherwise */
  public boolean isSetPan() {
    return this.pan != null;
  }

  public void setPanIsSet(boolean value) {
    if (!value) {
      this.pan = null;
    }
  }

  public short getEa() {
    return this.ea;
  }

  public Token setEa(short ea) {
    this.ea = ea;
    setEaIsSet(true);
    return this;
  }

  public void unsetEa() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EA_ISSET_ID);
  }

  /** Returns true if field ea is set (has been assigned a value) and false otherwise */
  public boolean isSetEa() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EA_ISSET_ID);
  }

  public void setEaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EA_ISSET_ID, value);
  }

  public short getTct() {
    return this.tct;
  }

  public Token setTct(short tct) {
    this.tct = tct;
    setTctIsSet(true);
    return this;
  }

  public void unsetTct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TCT_ISSET_ID);
  }

  /** Returns true if field tct is set (has been assigned a value) and false otherwise */
  public boolean isSetTct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TCT_ISSET_ID);
  }

  public void setTctIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TCT_ISSET_ID, value);
  }

  public int getSgc() {
    return this.sgc;
  }

  public Token setSgc(int sgc) {
    this.sgc = sgc;
    setSgcIsSet(true);
    return this;
  }

  public void unsetSgc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SGC_ISSET_ID);
  }

  /** Returns true if field sgc is set (has been assigned a value) and false otherwise */
  public boolean isSetSgc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SGC_ISSET_ID);
  }

  public void setSgcIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SGC_ISSET_ID, value);
  }

  public short getKrn() {
    return this.krn;
  }

  public Token setKrn(short krn) {
    this.krn = krn;
    setKrnIsSet(true);
    return this;
  }

  public void unsetKrn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KRN_ISSET_ID);
  }

  /** Returns true if field krn is set (has been assigned a value) and false otherwise */
  public boolean isSetKrn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KRN_ISSET_ID);
  }

  public void setKrnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KRN_ISSET_ID, value);
  }

  public short getTi() {
    return this.ti;
  }

  public Token setTi(short ti) {
    this.ti = ti;
    setTiIsSet(true);
    return this;
  }

  public void unsetTi() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TI_ISSET_ID);
  }

  /** Returns true if field ti is set (has been assigned a value) and false otherwise */
  public boolean isSetTi() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TI_ISSET_ID);
  }

  public void setTiIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TI_ISSET_ID, value);
  }

  public short getTokenClass() {
    return this.tokenClass;
  }

  public Token setTokenClass(short tokenClass) {
    this.tokenClass = tokenClass;
    setTokenClassIsSet(true);
    return this;
  }

  public void unsetTokenClass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKENCLASS_ISSET_ID);
  }

  /** Returns true if field tokenClass is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenClass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKENCLASS_ISSET_ID);
  }

  public void setTokenClassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKENCLASS_ISSET_ID, value);
  }

  public short getSubclass() {
    return this.subclass;
  }

  public Token setSubclass(short subclass) {
    this.subclass = subclass;
    setSubclassIsSet(true);
    return this;
  }

  public void unsetSubclass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
  }

  /** Returns true if field subclass is set (has been assigned a value) and false otherwise */
  public boolean isSetSubclass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
  }

  public void setSubclassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBCLASS_ISSET_ID, value);
  }

  public int getTid() {
    return this.tid;
  }

  public Token setTid(int tid) {
    this.tid = tid;
    setTidIsSet(true);
    return this;
  }

  public void unsetTid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public double getTransferAmount() {
    return this.transferAmount;
  }

  public Token setTransferAmount(double transferAmount) {
    this.transferAmount = transferAmount;
    setTransferAmountIsSet(true);
    return this;
  }

  public void unsetTransferAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID);
  }

  /** Returns true if field transferAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransferAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID);
  }

  public void setTransferAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID, value);
  }

  public boolean isIsReservedTid() {
    return this.isReservedTid;
  }

  public Token setIsReservedTid(boolean isReservedTid) {
    this.isReservedTid = isReservedTid;
    setIsReservedTidIsSet(true);
    return this;
  }

  public void unsetIsReservedTid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRESERVEDTID_ISSET_ID);
  }

  /** Returns true if field isReservedTid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReservedTid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRESERVEDTID_ISSET_ID);
  }

  public void setIsReservedTidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRESERVEDTID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public MeterConfigAdvice getNewConfig() {
    return this.newConfig;
  }

  public Token setNewConfig(@org.apache.thrift.annotation.Nullable MeterConfigAdvice newConfig) {
    this.newConfig = newConfig;
    return this;
  }

  public void unsetNewConfig() {
    this.newConfig = null;
  }

  /** Returns true if field newConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetNewConfig() {
    return this.newConfig != null;
  }

  public void setNewConfigIsSet(boolean value) {
    if (!value) {
      this.newConfig = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public Token setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStsUnitName() {
    return this.stsUnitName;
  }

  public Token setStsUnitName(@org.apache.thrift.annotation.Nullable java.lang.String stsUnitName) {
    this.stsUnitName = stsUnitName;
    return this;
  }

  public void unsetStsUnitName() {
    this.stsUnitName = null;
  }

  /** Returns true if field stsUnitName is set (has been assigned a value) and false otherwise */
  public boolean isSetStsUnitName() {
    return this.stsUnitName != null;
  }

  public void setStsUnitNameIsSet(boolean value) {
    if (!value) {
      this.stsUnitName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getScaledAmount() {
    return this.scaledAmount;
  }

  public Token setScaledAmount(@org.apache.thrift.annotation.Nullable java.lang.String scaledAmount) {
    this.scaledAmount = scaledAmount;
    return this;
  }

  public void unsetScaledAmount() {
    this.scaledAmount = null;
  }

  /** Returns true if field scaledAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetScaledAmount() {
    return this.scaledAmount != null;
  }

  public void setScaledAmountIsSet(boolean value) {
    if (!value) {
      this.scaledAmount = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getScaledUnitName() {
    return this.scaledUnitName;
  }

  public Token setScaledUnitName(@org.apache.thrift.annotation.Nullable java.lang.String scaledUnitName) {
    this.scaledUnitName = scaledUnitName;
    return this;
  }

  public void unsetScaledUnitName() {
    this.scaledUnitName = null;
  }

  /** Returns true if field scaledUnitName is set (has been assigned a value) and false otherwise */
  public boolean isSetScaledUnitName() {
    return this.scaledUnitName != null;
  }

  public void setScaledUnitNameIsSet(boolean value) {
    if (!value) {
      this.scaledUnitName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTokenDec() {
    return this.tokenDec;
  }

  public Token setTokenDec(@org.apache.thrift.annotation.Nullable java.lang.String tokenDec) {
    this.tokenDec = tokenDec;
    return this;
  }

  public void unsetTokenDec() {
    this.tokenDec = null;
  }

  /** Returns true if field tokenDec is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenDec() {
    return this.tokenDec != null;
  }

  public void setTokenDecIsSet(boolean value) {
    if (!value) {
      this.tokenDec = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTokenHex() {
    return this.tokenHex;
  }

  public Token setTokenHex(@org.apache.thrift.annotation.Nullable java.lang.String tokenHex) {
    this.tokenHex = tokenHex;
    return this;
  }

  public void unsetTokenHex() {
    this.tokenHex = null;
  }

  /** Returns true if field tokenHex is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenHex() {
    return this.tokenHex != null;
  }

  public void setTokenHexIsSet(boolean value) {
    if (!value) {
      this.tokenHex = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIdSm() {
    return this.idSm;
  }

  public Token setIdSm(@org.apache.thrift.annotation.Nullable java.lang.String idSm) {
    this.idSm = idSm;
    return this;
  }

  public void unsetIdSm() {
    this.idSm = null;
  }

  /** Returns true if field idSm is set (has been assigned a value) and false otherwise */
  public boolean isSetIdSm() {
    return this.idSm != null;
  }

  public void setIdSmIsSet(boolean value) {
    if (!value) {
      this.idSm = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVkKcv() {
    return this.vkKcv;
  }

  public Token setVkKcv(@org.apache.thrift.annotation.Nullable java.lang.String vkKcv) {
    this.vkKcv = vkKcv;
    return this;
  }

  public void unsetVkKcv() {
    this.vkKcv = null;
  }

  /** Returns true if field vkKcv is set (has been assigned a value) and false otherwise */
  public boolean isSetVkKcv() {
    return this.vkKcv != null;
  }

  public void setVkKcvIsSet(boolean value) {
    if (!value) {
      this.vkKcv = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DRN:
      if (value == null) {
        unsetDrn();
      } else {
        setDrn((java.lang.String)value);
      }
      break;

    case PAN:
      if (value == null) {
        unsetPan();
      } else {
        setPan((java.lang.String)value);
      }
      break;

    case EA:
      if (value == null) {
        unsetEa();
      } else {
        setEa((java.lang.Short)value);
      }
      break;

    case TCT:
      if (value == null) {
        unsetTct();
      } else {
        setTct((java.lang.Short)value);
      }
      break;

    case SGC:
      if (value == null) {
        unsetSgc();
      } else {
        setSgc((java.lang.Integer)value);
      }
      break;

    case KRN:
      if (value == null) {
        unsetKrn();
      } else {
        setKrn((java.lang.Short)value);
      }
      break;

    case TI:
      if (value == null) {
        unsetTi();
      } else {
        setTi((java.lang.Short)value);
      }
      break;

    case TOKEN_CLASS:
      if (value == null) {
        unsetTokenClass();
      } else {
        setTokenClass((java.lang.Short)value);
      }
      break;

    case SUBCLASS:
      if (value == null) {
        unsetSubclass();
      } else {
        setSubclass((java.lang.Short)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((java.lang.Integer)value);
      }
      break;

    case TRANSFER_AMOUNT:
      if (value == null) {
        unsetTransferAmount();
      } else {
        setTransferAmount((java.lang.Double)value);
      }
      break;

    case IS_RESERVED_TID:
      if (value == null) {
        unsetIsReservedTid();
      } else {
        setIsReservedTid((java.lang.Boolean)value);
      }
      break;

    case NEW_CONFIG:
      if (value == null) {
        unsetNewConfig();
      } else {
        setNewConfig((MeterConfigAdvice)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case STS_UNIT_NAME:
      if (value == null) {
        unsetStsUnitName();
      } else {
        setStsUnitName((java.lang.String)value);
      }
      break;

    case SCALED_AMOUNT:
      if (value == null) {
        unsetScaledAmount();
      } else {
        setScaledAmount((java.lang.String)value);
      }
      break;

    case SCALED_UNIT_NAME:
      if (value == null) {
        unsetScaledUnitName();
      } else {
        setScaledUnitName((java.lang.String)value);
      }
      break;

    case TOKEN_DEC:
      if (value == null) {
        unsetTokenDec();
      } else {
        setTokenDec((java.lang.String)value);
      }
      break;

    case TOKEN_HEX:
      if (value == null) {
        unsetTokenHex();
      } else {
        setTokenHex((java.lang.String)value);
      }
      break;

    case ID_SM:
      if (value == null) {
        unsetIdSm();
      } else {
        setIdSm((java.lang.String)value);
      }
      break;

    case VK_KCV:
      if (value == null) {
        unsetVkKcv();
      } else {
        setVkKcv((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DRN:
      return getDrn();

    case PAN:
      return getPan();

    case EA:
      return getEa();

    case TCT:
      return getTct();

    case SGC:
      return getSgc();

    case KRN:
      return getKrn();

    case TI:
      return getTi();

    case TOKEN_CLASS:
      return getTokenClass();

    case SUBCLASS:
      return getSubclass();

    case TID:
      return getTid();

    case TRANSFER_AMOUNT:
      return getTransferAmount();

    case IS_RESERVED_TID:
      return isIsReservedTid();

    case NEW_CONFIG:
      return getNewConfig();

    case DESCRIPTION:
      return getDescription();

    case STS_UNIT_NAME:
      return getStsUnitName();

    case SCALED_AMOUNT:
      return getScaledAmount();

    case SCALED_UNIT_NAME:
      return getScaledUnitName();

    case TOKEN_DEC:
      return getTokenDec();

    case TOKEN_HEX:
      return getTokenHex();

    case ID_SM:
      return getIdSm();

    case VK_KCV:
      return getVkKcv();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DRN:
      return isSetDrn();
    case PAN:
      return isSetPan();
    case EA:
      return isSetEa();
    case TCT:
      return isSetTct();
    case SGC:
      return isSetSgc();
    case KRN:
      return isSetKrn();
    case TI:
      return isSetTi();
    case TOKEN_CLASS:
      return isSetTokenClass();
    case SUBCLASS:
      return isSetSubclass();
    case TID:
      return isSetTid();
    case TRANSFER_AMOUNT:
      return isSetTransferAmount();
    case IS_RESERVED_TID:
      return isSetIsReservedTid();
    case NEW_CONFIG:
      return isSetNewConfig();
    case DESCRIPTION:
      return isSetDescription();
    case STS_UNIT_NAME:
      return isSetStsUnitName();
    case SCALED_AMOUNT:
      return isSetScaledAmount();
    case SCALED_UNIT_NAME:
      return isSetScaledUnitName();
    case TOKEN_DEC:
      return isSetTokenDec();
    case TOKEN_HEX:
      return isSetTokenHex();
    case ID_SM:
      return isSetIdSm();
    case VK_KCV:
      return isSetVkKcv();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Token)
      return this.equals((Token)that);
    return false;
  }

  public boolean equals(Token that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_drn = true && this.isSetDrn();
    boolean that_present_drn = true && that.isSetDrn();
    if (this_present_drn || that_present_drn) {
      if (!(this_present_drn && that_present_drn))
        return false;
      if (!this.drn.equals(that.drn))
        return false;
    }

    boolean this_present_pan = true && this.isSetPan();
    boolean that_present_pan = true && that.isSetPan();
    if (this_present_pan || that_present_pan) {
      if (!(this_present_pan && that_present_pan))
        return false;
      if (!this.pan.equals(that.pan))
        return false;
    }

    boolean this_present_ea = true;
    boolean that_present_ea = true;
    if (this_present_ea || that_present_ea) {
      if (!(this_present_ea && that_present_ea))
        return false;
      if (this.ea != that.ea)
        return false;
    }

    boolean this_present_tct = true;
    boolean that_present_tct = true;
    if (this_present_tct || that_present_tct) {
      if (!(this_present_tct && that_present_tct))
        return false;
      if (this.tct != that.tct)
        return false;
    }

    boolean this_present_sgc = true;
    boolean that_present_sgc = true;
    if (this_present_sgc || that_present_sgc) {
      if (!(this_present_sgc && that_present_sgc))
        return false;
      if (this.sgc != that.sgc)
        return false;
    }

    boolean this_present_krn = true;
    boolean that_present_krn = true;
    if (this_present_krn || that_present_krn) {
      if (!(this_present_krn && that_present_krn))
        return false;
      if (this.krn != that.krn)
        return false;
    }

    boolean this_present_ti = true;
    boolean that_present_ti = true;
    if (this_present_ti || that_present_ti) {
      if (!(this_present_ti && that_present_ti))
        return false;
      if (this.ti != that.ti)
        return false;
    }

    boolean this_present_tokenClass = true;
    boolean that_present_tokenClass = true;
    if (this_present_tokenClass || that_present_tokenClass) {
      if (!(this_present_tokenClass && that_present_tokenClass))
        return false;
      if (this.tokenClass != that.tokenClass)
        return false;
    }

    boolean this_present_subclass = true;
    boolean that_present_subclass = true;
    if (this_present_subclass || that_present_subclass) {
      if (!(this_present_subclass && that_present_subclass))
        return false;
      if (this.subclass != that.subclass)
        return false;
    }

    boolean this_present_tid = true;
    boolean that_present_tid = true;
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_transferAmount = true;
    boolean that_present_transferAmount = true;
    if (this_present_transferAmount || that_present_transferAmount) {
      if (!(this_present_transferAmount && that_present_transferAmount))
        return false;
      if (this.transferAmount != that.transferAmount)
        return false;
    }

    boolean this_present_isReservedTid = true;
    boolean that_present_isReservedTid = true;
    if (this_present_isReservedTid || that_present_isReservedTid) {
      if (!(this_present_isReservedTid && that_present_isReservedTid))
        return false;
      if (this.isReservedTid != that.isReservedTid)
        return false;
    }

    boolean this_present_newConfig = true && this.isSetNewConfig();
    boolean that_present_newConfig = true && that.isSetNewConfig();
    if (this_present_newConfig || that_present_newConfig) {
      if (!(this_present_newConfig && that_present_newConfig))
        return false;
      if (!this.newConfig.equals(that.newConfig))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_stsUnitName = true && this.isSetStsUnitName();
    boolean that_present_stsUnitName = true && that.isSetStsUnitName();
    if (this_present_stsUnitName || that_present_stsUnitName) {
      if (!(this_present_stsUnitName && that_present_stsUnitName))
        return false;
      if (!this.stsUnitName.equals(that.stsUnitName))
        return false;
    }

    boolean this_present_scaledAmount = true && this.isSetScaledAmount();
    boolean that_present_scaledAmount = true && that.isSetScaledAmount();
    if (this_present_scaledAmount || that_present_scaledAmount) {
      if (!(this_present_scaledAmount && that_present_scaledAmount))
        return false;
      if (!this.scaledAmount.equals(that.scaledAmount))
        return false;
    }

    boolean this_present_scaledUnitName = true && this.isSetScaledUnitName();
    boolean that_present_scaledUnitName = true && that.isSetScaledUnitName();
    if (this_present_scaledUnitName || that_present_scaledUnitName) {
      if (!(this_present_scaledUnitName && that_present_scaledUnitName))
        return false;
      if (!this.scaledUnitName.equals(that.scaledUnitName))
        return false;
    }

    boolean this_present_tokenDec = true && this.isSetTokenDec();
    boolean that_present_tokenDec = true && that.isSetTokenDec();
    if (this_present_tokenDec || that_present_tokenDec) {
      if (!(this_present_tokenDec && that_present_tokenDec))
        return false;
      if (!this.tokenDec.equals(that.tokenDec))
        return false;
    }

    boolean this_present_tokenHex = true && this.isSetTokenHex();
    boolean that_present_tokenHex = true && that.isSetTokenHex();
    if (this_present_tokenHex || that_present_tokenHex) {
      if (!(this_present_tokenHex && that_present_tokenHex))
        return false;
      if (!this.tokenHex.equals(that.tokenHex))
        return false;
    }

    boolean this_present_idSm = true && this.isSetIdSm();
    boolean that_present_idSm = true && that.isSetIdSm();
    if (this_present_idSm || that_present_idSm) {
      if (!(this_present_idSm && that_present_idSm))
        return false;
      if (!this.idSm.equals(that.idSm))
        return false;
    }

    boolean this_present_vkKcv = true && this.isSetVkKcv();
    boolean that_present_vkKcv = true && that.isSetVkKcv();
    if (this_present_vkKcv || that_present_vkKcv) {
      if (!(this_present_vkKcv && that_present_vkKcv))
        return false;
      if (!this.vkKcv.equals(that.vkKcv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDrn()) ? 131071 : 524287);
    if (isSetDrn())
      hashCode = hashCode * 8191 + drn.hashCode();

    hashCode = hashCode * 8191 + ((isSetPan()) ? 131071 : 524287);
    if (isSetPan())
      hashCode = hashCode * 8191 + pan.hashCode();

    hashCode = hashCode * 8191 + ea;

    hashCode = hashCode * 8191 + tct;

    hashCode = hashCode * 8191 + sgc;

    hashCode = hashCode * 8191 + krn;

    hashCode = hashCode * 8191 + ti;

    hashCode = hashCode * 8191 + tokenClass;

    hashCode = hashCode * 8191 + subclass;

    hashCode = hashCode * 8191 + tid;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transferAmount);

    hashCode = hashCode * 8191 + ((isReservedTid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNewConfig()) ? 131071 : 524287);
    if (isSetNewConfig())
      hashCode = hashCode * 8191 + newConfig.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetStsUnitName()) ? 131071 : 524287);
    if (isSetStsUnitName())
      hashCode = hashCode * 8191 + stsUnitName.hashCode();

    hashCode = hashCode * 8191 + ((isSetScaledAmount()) ? 131071 : 524287);
    if (isSetScaledAmount())
      hashCode = hashCode * 8191 + scaledAmount.hashCode();

    hashCode = hashCode * 8191 + ((isSetScaledUnitName()) ? 131071 : 524287);
    if (isSetScaledUnitName())
      hashCode = hashCode * 8191 + scaledUnitName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTokenDec()) ? 131071 : 524287);
    if (isSetTokenDec())
      hashCode = hashCode * 8191 + tokenDec.hashCode();

    hashCode = hashCode * 8191 + ((isSetTokenHex()) ? 131071 : 524287);
    if (isSetTokenHex())
      hashCode = hashCode * 8191 + tokenHex.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdSm()) ? 131071 : 524287);
    if (isSetIdSm())
      hashCode = hashCode * 8191 + idSm.hashCode();

    hashCode = hashCode * 8191 + ((isSetVkKcv()) ? 131071 : 524287);
    if (isSetVkKcv())
      hashCode = hashCode * 8191 + vkKcv.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Token other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDrn()).compareTo(other.isSetDrn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drn, other.drn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPan()).compareTo(other.isSetPan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pan, other.pan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEa()).compareTo(other.isSetEa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ea, other.ea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTct()).compareTo(other.isSetTct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tct, other.tct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSgc()).compareTo(other.isSetSgc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgc, other.sgc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKrn()).compareTo(other.isSetKrn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKrn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krn, other.krn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTi()).compareTo(other.isSetTi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ti, other.ti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenClass()).compareTo(other.isSetTokenClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenClass, other.tokenClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubclass()).compareTo(other.isSetSubclass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubclass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subclass, other.subclass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTransferAmount()).compareTo(other.isSetTransferAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransferAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferAmount, other.transferAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsReservedTid()).compareTo(other.isSetIsReservedTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReservedTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReservedTid, other.isReservedTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewConfig()).compareTo(other.isSetNewConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newConfig, other.newConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStsUnitName()).compareTo(other.isSetStsUnitName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStsUnitName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stsUnitName, other.stsUnitName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScaledAmount()).compareTo(other.isSetScaledAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScaledAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scaledAmount, other.scaledAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScaledUnitName()).compareTo(other.isSetScaledUnitName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScaledUnitName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scaledUnitName, other.scaledUnitName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenDec()).compareTo(other.isSetTokenDec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenDec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenDec, other.tokenDec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenHex()).compareTo(other.isSetTokenHex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenHex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenHex, other.tokenHex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdSm()).compareTo(other.isSetIdSm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdSm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idSm, other.idSm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVkKcv()).compareTo(other.isSetVkKcv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVkKcv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vkKcv, other.vkKcv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Token(");
    boolean first = true;

    sb.append("drn:");
    if (this.drn == null) {
      sb.append("null");
    } else {
      sb.append(this.drn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pan:");
    if (this.pan == null) {
      sb.append("null");
    } else {
      sb.append(this.pan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ea:");
    sb.append(this.ea);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tct:");
    sb.append(this.tct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sgc:");
    sb.append(this.sgc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("krn:");
    sb.append(this.krn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ti:");
    sb.append(this.ti);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenClass:");
    sb.append(this.tokenClass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subclass:");
    sb.append(this.subclass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tid:");
    sb.append(this.tid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transferAmount:");
    sb.append(this.transferAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReservedTid:");
    sb.append(this.isReservedTid);
    first = false;
    if (isSetNewConfig()) {
      if (!first) sb.append(", ");
      sb.append("newConfig:");
      if (this.newConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.newConfig);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stsUnitName:");
    if (this.stsUnitName == null) {
      sb.append("null");
    } else {
      sb.append(this.stsUnitName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scaledAmount:");
    if (this.scaledAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.scaledAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scaledUnitName:");
    if (this.scaledUnitName == null) {
      sb.append("null");
    } else {
      sb.append(this.scaledUnitName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenDec:");
    if (this.tokenDec == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenDec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenHex:");
    if (this.tokenHex == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenHex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("idSm:");
    if (this.idSm == null) {
      sb.append("null");
    } else {
      sb.append(this.idSm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vkKcv:");
    if (this.vkKcv == null) {
      sb.append("null");
    } else {
      sb.append(this.vkKcv);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (drn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'drn' was not present! Struct: " + toString());
    }
    if (pan == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pan' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ea' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tct' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sgc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'krn' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ti' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tokenClass' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'subclass' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'transferAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isReservedTid' because it's a primitive and you chose the non-beans generator.
    if (description == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
    }
    if (stsUnitName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stsUnitName' was not present! Struct: " + toString());
    }
    if (scaledAmount == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scaledAmount' was not present! Struct: " + toString());
    }
    if (scaledUnitName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scaledUnitName' was not present! Struct: " + toString());
    }
    if (tokenDec == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenDec' was not present! Struct: " + toString());
    }
    if (tokenHex == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenHex' was not present! Struct: " + toString());
    }
    if (idSm == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'idSm' was not present! Struct: " + toString());
    }
    if (vkKcv == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vkKcv' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (newConfig != null) {
      newConfig.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenStandardScheme getScheme() {
      return new TokenStandardScheme();
    }
  }

  private static class TokenStandardScheme extends org.apache.thrift.scheme.StandardScheme<Token> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Token struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DRN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drn = iprot.readString();
              struct.setDrnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pan = iprot.readString();
              struct.setPanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EA
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ea = iprot.readI16();
              struct.setEaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TCT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tct = iprot.readI16();
              struct.setTctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SGC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sgc = iprot.readI32();
              struct.setSgcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KRN
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.krn = iprot.readI16();
              struct.setKrnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TI
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ti = iprot.readI16();
              struct.setTiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOKEN_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tokenClass = iprot.readI16();
              struct.setTokenClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUBCLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.subclass = iprot.readI16();
              struct.setSubclassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tid = iprot.readI32();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TRANSFER_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.transferAmount = iprot.readDouble();
              struct.setTransferAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_RESERVED_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isReservedTid = iprot.readBool();
              struct.setIsReservedTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NEW_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.newConfig = new MeterConfigAdvice();
              struct.newConfig.read(iprot);
              struct.setNewConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // STS_UNIT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stsUnitName = iprot.readString();
              struct.setStsUnitNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SCALED_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scaledAmount = iprot.readString();
              struct.setScaledAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SCALED_UNIT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scaledUnitName = iprot.readString();
              struct.setScaledUnitNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TOKEN_DEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tokenDec = iprot.readString();
              struct.setTokenDecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TOKEN_HEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tokenHex = iprot.readString();
              struct.setTokenHexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ID_SM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idSm = iprot.readString();
              struct.setIdSmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // VK_KCV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vkKcv = iprot.readString();
              struct.setVkKcvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEa()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ea' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTct()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tct' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSgc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sgc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKrn()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'krn' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTi()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ti' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTokenClass()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenClass' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSubclass()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'subclass' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransferAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transferAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsReservedTid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isReservedTid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Token struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.drn != null) {
        oprot.writeFieldBegin(DRN_FIELD_DESC);
        oprot.writeString(struct.drn);
        oprot.writeFieldEnd();
      }
      if (struct.pan != null) {
        oprot.writeFieldBegin(PAN_FIELD_DESC);
        oprot.writeString(struct.pan);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EA_FIELD_DESC);
      oprot.writeI16(struct.ea);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TCT_FIELD_DESC);
      oprot.writeI16(struct.tct);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SGC_FIELD_DESC);
      oprot.writeI32(struct.sgc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KRN_FIELD_DESC);
      oprot.writeI16(struct.krn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TI_FIELD_DESC);
      oprot.writeI16(struct.ti);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOKEN_CLASS_FIELD_DESC);
      oprot.writeI16(struct.tokenClass);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBCLASS_FIELD_DESC);
      oprot.writeI16(struct.subclass);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TID_FIELD_DESC);
      oprot.writeI32(struct.tid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSFER_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.transferAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RESERVED_TID_FIELD_DESC);
      oprot.writeBool(struct.isReservedTid);
      oprot.writeFieldEnd();
      if (struct.newConfig != null) {
        if (struct.isSetNewConfig()) {
          oprot.writeFieldBegin(NEW_CONFIG_FIELD_DESC);
          struct.newConfig.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.stsUnitName != null) {
        oprot.writeFieldBegin(STS_UNIT_NAME_FIELD_DESC);
        oprot.writeString(struct.stsUnitName);
        oprot.writeFieldEnd();
      }
      if (struct.scaledAmount != null) {
        oprot.writeFieldBegin(SCALED_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.scaledAmount);
        oprot.writeFieldEnd();
      }
      if (struct.scaledUnitName != null) {
        oprot.writeFieldBegin(SCALED_UNIT_NAME_FIELD_DESC);
        oprot.writeString(struct.scaledUnitName);
        oprot.writeFieldEnd();
      }
      if (struct.tokenDec != null) {
        oprot.writeFieldBegin(TOKEN_DEC_FIELD_DESC);
        oprot.writeString(struct.tokenDec);
        oprot.writeFieldEnd();
      }
      if (struct.tokenHex != null) {
        oprot.writeFieldBegin(TOKEN_HEX_FIELD_DESC);
        oprot.writeString(struct.tokenHex);
        oprot.writeFieldEnd();
      }
      if (struct.idSm != null) {
        oprot.writeFieldBegin(ID_SM_FIELD_DESC);
        oprot.writeString(struct.idSm);
        oprot.writeFieldEnd();
      }
      if (struct.vkKcv != null) {
        oprot.writeFieldBegin(VK_KCV_FIELD_DESC);
        oprot.writeString(struct.vkKcv);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenTupleScheme getScheme() {
      return new TokenTupleScheme();
    }
  }

  private static class TokenTupleScheme extends org.apache.thrift.scheme.TupleScheme<Token> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Token struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.drn);
      oprot.writeString(struct.pan);
      oprot.writeI16(struct.ea);
      oprot.writeI16(struct.tct);
      oprot.writeI32(struct.sgc);
      oprot.writeI16(struct.krn);
      oprot.writeI16(struct.ti);
      oprot.writeI16(struct.tokenClass);
      oprot.writeI16(struct.subclass);
      oprot.writeI32(struct.tid);
      oprot.writeDouble(struct.transferAmount);
      oprot.writeBool(struct.isReservedTid);
      oprot.writeString(struct.description);
      oprot.writeString(struct.stsUnitName);
      oprot.writeString(struct.scaledAmount);
      oprot.writeString(struct.scaledUnitName);
      oprot.writeString(struct.tokenDec);
      oprot.writeString(struct.tokenHex);
      oprot.writeString(struct.idSm);
      oprot.writeString(struct.vkKcv);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNewConfig()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNewConfig()) {
        struct.newConfig.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Token struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.drn = iprot.readString();
      struct.setDrnIsSet(true);
      struct.pan = iprot.readString();
      struct.setPanIsSet(true);
      struct.ea = iprot.readI16();
      struct.setEaIsSet(true);
      struct.tct = iprot.readI16();
      struct.setTctIsSet(true);
      struct.sgc = iprot.readI32();
      struct.setSgcIsSet(true);
      struct.krn = iprot.readI16();
      struct.setKrnIsSet(true);
      struct.ti = iprot.readI16();
      struct.setTiIsSet(true);
      struct.tokenClass = iprot.readI16();
      struct.setTokenClassIsSet(true);
      struct.subclass = iprot.readI16();
      struct.setSubclassIsSet(true);
      struct.tid = iprot.readI32();
      struct.setTidIsSet(true);
      struct.transferAmount = iprot.readDouble();
      struct.setTransferAmountIsSet(true);
      struct.isReservedTid = iprot.readBool();
      struct.setIsReservedTidIsSet(true);
      struct.description = iprot.readString();
      struct.setDescriptionIsSet(true);
      struct.stsUnitName = iprot.readString();
      struct.setStsUnitNameIsSet(true);
      struct.scaledAmount = iprot.readString();
      struct.setScaledAmountIsSet(true);
      struct.scaledUnitName = iprot.readString();
      struct.setScaledUnitNameIsSet(true);
      struct.tokenDec = iprot.readString();
      struct.setTokenDecIsSet(true);
      struct.tokenHex = iprot.readString();
      struct.setTokenHexIsSet(true);
      struct.idSm = iprot.readString();
      struct.setIdSmIsSet(true);
      struct.vkKcv = iprot.readString();
      struct.setVkKcvIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.newConfig = new MeterConfigAdvice();
        struct.newConfig.read(iprot);
        struct.setNewConfigIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


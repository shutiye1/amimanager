/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package safariami.manager.prismtoken1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-03")
public class ApiException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ApiException, ApiException._Fields>, java.io.Serializable, Cloneable, Comparable<ApiException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApiException");

  private static final org.apache.thrift.protocol.TField E_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("eCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField E_MSG_EN_FIELD_DESC = new org.apache.thrift.protocol.TField("eMsgEn", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApiExceptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApiExceptionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String eCode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String eMsgEn; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    E_CODE((short)1, "eCode"),
    E_MSG_EN((short)2, "eMsgEn");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // E_CODE
          return E_CODE;
        case 2: // E_MSG_EN
          return E_MSG_EN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.E_CODE, new org.apache.thrift.meta_data.FieldMetaData("eCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_MSG_EN, new org.apache.thrift.meta_data.FieldMetaData("eMsgEn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApiException.class, metaDataMap);
  }

  public ApiException() {
  }

  public ApiException(
    java.lang.String eCode,
    java.lang.String eMsgEn)
  {
    this();
    this.eCode = eCode;
    this.eMsgEn = eMsgEn;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApiException(ApiException other) {
    if (other.isSetECode()) {
      this.eCode = other.eCode;
    }
    if (other.isSetEMsgEn()) {
      this.eMsgEn = other.eMsgEn;
    }
  }

  public ApiException deepCopy() {
    return new ApiException(this);
  }

  @Override
  public void clear() {
    this.eCode = null;
    this.eMsgEn = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getECode() {
    return this.eCode;
  }

  public ApiException setECode(@org.apache.thrift.annotation.Nullable java.lang.String eCode) {
    this.eCode = eCode;
    return this;
  }

  public void unsetECode() {
    this.eCode = null;
  }

  /** Returns true if field eCode is set (has been assigned a value) and false otherwise */
  public boolean isSetECode() {
    return this.eCode != null;
  }

  public void setECodeIsSet(boolean value) {
    if (!value) {
      this.eCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEMsgEn() {
    return this.eMsgEn;
  }

  public ApiException setEMsgEn(@org.apache.thrift.annotation.Nullable java.lang.String eMsgEn) {
    this.eMsgEn = eMsgEn;
    return this;
  }

  public void unsetEMsgEn() {
    this.eMsgEn = null;
  }

  /** Returns true if field eMsgEn is set (has been assigned a value) and false otherwise */
  public boolean isSetEMsgEn() {
    return this.eMsgEn != null;
  }

  public void setEMsgEnIsSet(boolean value) {
    if (!value) {
      this.eMsgEn = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case E_CODE:
      if (value == null) {
        unsetECode();
      } else {
        setECode((java.lang.String)value);
      }
      break;

    case E_MSG_EN:
      if (value == null) {
        unsetEMsgEn();
      } else {
        setEMsgEn((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case E_CODE:
      return getECode();

    case E_MSG_EN:
      return getEMsgEn();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case E_CODE:
      return isSetECode();
    case E_MSG_EN:
      return isSetEMsgEn();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ApiException)
      return this.equals((ApiException)that);
    return false;
  }

  public boolean equals(ApiException that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_eCode = true && this.isSetECode();
    boolean that_present_eCode = true && that.isSetECode();
    if (this_present_eCode || that_present_eCode) {
      if (!(this_present_eCode && that_present_eCode))
        return false;
      if (!this.eCode.equals(that.eCode))
        return false;
    }

    boolean this_present_eMsgEn = true && this.isSetEMsgEn();
    boolean that_present_eMsgEn = true && that.isSetEMsgEn();
    if (this_present_eMsgEn || that_present_eMsgEn) {
      if (!(this_present_eMsgEn && that_present_eMsgEn))
        return false;
      if (!this.eMsgEn.equals(that.eMsgEn))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetECode()) ? 131071 : 524287);
    if (isSetECode())
      hashCode = hashCode * 8191 + eCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetEMsgEn()) ? 131071 : 524287);
    if (isSetEMsgEn())
      hashCode = hashCode * 8191 + eMsgEn.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ApiException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetECode()).compareTo(other.isSetECode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetECode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eCode, other.eCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEMsgEn()).compareTo(other.isSetEMsgEn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEMsgEn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eMsgEn, other.eMsgEn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ApiException(");
    boolean first = true;

    sb.append("eCode:");
    if (this.eCode == null) {
      sb.append("null");
    } else {
      sb.append(this.eCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eMsgEn:");
    if (this.eMsgEn == null) {
      sb.append("null");
    } else {
      sb.append(this.eMsgEn);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (eCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eCode' was not present! Struct: " + toString());
    }
    if (eMsgEn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eMsgEn' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApiExceptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApiExceptionStandardScheme getScheme() {
      return new ApiExceptionStandardScheme();
    }
  }

  private static class ApiExceptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApiException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApiException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // E_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eCode = iprot.readString();
              struct.setECodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // E_MSG_EN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eMsgEn = iprot.readString();
              struct.setEMsgEnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApiException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.eCode != null) {
        oprot.writeFieldBegin(E_CODE_FIELD_DESC);
        oprot.writeString(struct.eCode);
        oprot.writeFieldEnd();
      }
      if (struct.eMsgEn != null) {
        oprot.writeFieldBegin(E_MSG_EN_FIELD_DESC);
        oprot.writeString(struct.eMsgEn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApiExceptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApiExceptionTupleScheme getScheme() {
      return new ApiExceptionTupleScheme();
    }
  }

  private static class ApiExceptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApiException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApiException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.eCode);
      oprot.writeString(struct.eMsgEn);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApiException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.eCode = iprot.readString();
      struct.setECodeIsSet(true);
      struct.eMsgEn = iprot.readString();
      struct.setEMsgEnIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


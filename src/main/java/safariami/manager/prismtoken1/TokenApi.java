/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package safariami.manager.prismtoken1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-03")
public class TokenApi {

  public interface Iface {

    public java.lang.String ping(int sleepMs, java.lang.String echo) throws ApiException, org.apache.thrift.TException;

    public SignInResult signInWithPassword(java.lang.String messageId, java.lang.String realm, java.lang.String username, java.lang.String password, SessionOptions sessionOpts) throws ApiException, org.apache.thrift.TException;

    public java.util.List<NodeStatus> getStatus(java.lang.String messageId, java.lang.String accessToken) throws ApiException, org.apache.thrift.TException;

    public MeterConfigIn parseIdRecord(java.lang.String messageId, java.lang.String accessToken, java.lang.String idRecord) throws ApiException, org.apache.thrift.TException;

    public java.util.List<Token> issueCreditToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags) throws ApiException, org.apache.thrift.TException;

    public MeterTestToken issueMeterTestToken(java.lang.String messageId, java.lang.String accessToken, short subclass, long control, short mfrcode) throws ApiException, org.apache.thrift.TException;

    public java.util.List<Token> issueMseToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags) throws ApiException, org.apache.thrift.TException;

    public java.util.List<Token> issueKeyChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, MeterConfigAmendment newConfig) throws ApiException, org.apache.thrift.TException;

    public VerifyResult verifyToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, java.lang.String tokenDec) throws ApiException, org.apache.thrift.TException;

    public java.util.List<Token> issueDitkChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig) throws ApiException, org.apache.thrift.TException;

    public java.util.List<Token> fetchTokenResult(java.lang.String messageId, java.lang.String accessToken, java.lang.String reqMessageId) throws ApiException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> ctsResetTidList(java.lang.String messageId, java.lang.String accessToken, java.lang.String panPattern) throws ApiException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(int sleepMs, java.lang.String echo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void signInWithPassword(java.lang.String messageId, java.lang.String realm, java.lang.String username, java.lang.String password, SessionOptions sessionOpts, org.apache.thrift.async.AsyncMethodCallback<SignInResult> resultHandler) throws org.apache.thrift.TException;

    public void getStatus(java.lang.String messageId, java.lang.String accessToken, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeStatus>> resultHandler) throws org.apache.thrift.TException;

    public void parseIdRecord(java.lang.String messageId, java.lang.String accessToken, java.lang.String idRecord, org.apache.thrift.async.AsyncMethodCallback<MeterConfigIn> resultHandler) throws org.apache.thrift.TException;

    public void issueCreditToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException;

    public void issueMeterTestToken(java.lang.String messageId, java.lang.String accessToken, short subclass, long control, short mfrcode, org.apache.thrift.async.AsyncMethodCallback<MeterTestToken> resultHandler) throws org.apache.thrift.TException;

    public void issueMseToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException;

    public void issueKeyChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, MeterConfigAmendment newConfig, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException;

    public void verifyToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, java.lang.String tokenDec, org.apache.thrift.async.AsyncMethodCallback<VerifyResult> resultHandler) throws org.apache.thrift.TException;

    public void issueDitkChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException;

    public void fetchTokenResult(java.lang.String messageId, java.lang.String accessToken, java.lang.String reqMessageId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException;

    public void ctsResetTidList(java.lang.String messageId, java.lang.String accessToken, java.lang.String panPattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String ping(int sleepMs, java.lang.String echo) throws ApiException, org.apache.thrift.TException
    {
      send_ping(sleepMs, echo);
      return recv_ping();
    }

    public void send_ping(int sleepMs, java.lang.String echo) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setSleepMs(sleepMs);
      args.setEcho(echo);
      sendBase("ping", args);
    }

    public java.lang.String recv_ping() throws ApiException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public SignInResult signInWithPassword(java.lang.String messageId, java.lang.String realm, java.lang.String username, java.lang.String password, SessionOptions sessionOpts) throws ApiException, org.apache.thrift.TException
    {
      send_signInWithPassword(messageId, realm, username, password, sessionOpts);
      return recv_signInWithPassword();
    }

    public void send_signInWithPassword(java.lang.String messageId, java.lang.String realm, java.lang.String username, java.lang.String password, SessionOptions sessionOpts) throws org.apache.thrift.TException
    {
      signInWithPassword_args args = new signInWithPassword_args();
      args.setMessageId(messageId);
      args.setRealm(realm);
      args.setUsername(username);
      args.setPassword(password);
      args.setSessionOpts(sessionOpts);
      sendBase("signInWithPassword", args);
    }

    public SignInResult recv_signInWithPassword() throws ApiException, org.apache.thrift.TException
    {
      signInWithPassword_result result = new signInWithPassword_result();
      receiveBase(result, "signInWithPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signInWithPassword failed: unknown result");
    }

    public java.util.List<NodeStatus> getStatus(java.lang.String messageId, java.lang.String accessToken) throws ApiException, org.apache.thrift.TException
    {
      send_getStatus(messageId, accessToken);
      return recv_getStatus();
    }

    public void send_getStatus(java.lang.String messageId, java.lang.String accessToken) throws org.apache.thrift.TException
    {
      getStatus_args args = new getStatus_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      sendBase("getStatus", args);
    }

    public java.util.List<NodeStatus> recv_getStatus() throws ApiException, org.apache.thrift.TException
    {
      getStatus_result result = new getStatus_result();
      receiveBase(result, "getStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStatus failed: unknown result");
    }

    public MeterConfigIn parseIdRecord(java.lang.String messageId, java.lang.String accessToken, java.lang.String idRecord) throws ApiException, org.apache.thrift.TException
    {
      send_parseIdRecord(messageId, accessToken, idRecord);
      return recv_parseIdRecord();
    }

    public void send_parseIdRecord(java.lang.String messageId, java.lang.String accessToken, java.lang.String idRecord) throws org.apache.thrift.TException
    {
      parseIdRecord_args args = new parseIdRecord_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setIdRecord(idRecord);
      sendBase("parseIdRecord", args);
    }

    public MeterConfigIn recv_parseIdRecord() throws ApiException, org.apache.thrift.TException
    {
      parseIdRecord_result result = new parseIdRecord_result();
      receiveBase(result, "parseIdRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseIdRecord failed: unknown result");
    }

    public java.util.List<Token> issueCreditToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags) throws ApiException, org.apache.thrift.TException
    {
      send_issueCreditToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
      return recv_issueCreditToken();
    }

    public void send_issueCreditToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags) throws org.apache.thrift.TException
    {
      issueCreditToken_args args = new issueCreditToken_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setMeterConfig(meterConfig);
      args.setSubclass(subclass);
      args.setTransferAmount(transferAmount);
      args.setTokenTime(tokenTime);
      args.setFlags(flags);
      sendBase("issueCreditToken", args);
    }

    public java.util.List<Token> recv_issueCreditToken() throws ApiException, org.apache.thrift.TException
    {
      issueCreditToken_result result = new issueCreditToken_result();
      receiveBase(result, "issueCreditToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueCreditToken failed: unknown result");
    }

    public MeterTestToken issueMeterTestToken(java.lang.String messageId, java.lang.String accessToken, short subclass, long control, short mfrcode) throws ApiException, org.apache.thrift.TException
    {
      send_issueMeterTestToken(messageId, accessToken, subclass, control, mfrcode);
      return recv_issueMeterTestToken();
    }

    public void send_issueMeterTestToken(java.lang.String messageId, java.lang.String accessToken, short subclass, long control, short mfrcode) throws org.apache.thrift.TException
    {
      issueMeterTestToken_args args = new issueMeterTestToken_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setSubclass(subclass);
      args.setControl(control);
      args.setMfrcode(mfrcode);
      sendBase("issueMeterTestToken", args);
    }

    public MeterTestToken recv_issueMeterTestToken() throws ApiException, org.apache.thrift.TException
    {
      issueMeterTestToken_result result = new issueMeterTestToken_result();
      receiveBase(result, "issueMeterTestToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueMeterTestToken failed: unknown result");
    }

    public java.util.List<Token> issueMseToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags) throws ApiException, org.apache.thrift.TException
    {
      send_issueMseToken(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags);
      return recv_issueMseToken();
    }

    public void send_issueMseToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags) throws org.apache.thrift.TException
    {
      issueMseToken_args args = new issueMseToken_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setMeterConfig(meterConfig);
      args.setSubclass(subclass);
      args.setTransferAmount(transferAmount);
      args.setTokenTime(tokenTime);
      args.setFlags(flags);
      sendBase("issueMseToken", args);
    }

    public java.util.List<Token> recv_issueMseToken() throws ApiException, org.apache.thrift.TException
    {
      issueMseToken_result result = new issueMseToken_result();
      receiveBase(result, "issueMseToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueMseToken failed: unknown result");
    }

    public java.util.List<Token> issueKeyChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, MeterConfigAmendment newConfig) throws ApiException, org.apache.thrift.TException
    {
      send_issueKeyChangeTokens(messageId, accessToken, meterConfig, newConfig);
      return recv_issueKeyChangeTokens();
    }

    public void send_issueKeyChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, MeterConfigAmendment newConfig) throws org.apache.thrift.TException
    {
      issueKeyChangeTokens_args args = new issueKeyChangeTokens_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setMeterConfig(meterConfig);
      args.setNewConfig(newConfig);
      sendBase("issueKeyChangeTokens", args);
    }

    public java.util.List<Token> recv_issueKeyChangeTokens() throws ApiException, org.apache.thrift.TException
    {
      issueKeyChangeTokens_result result = new issueKeyChangeTokens_result();
      receiveBase(result, "issueKeyChangeTokens");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueKeyChangeTokens failed: unknown result");
    }

    public VerifyResult verifyToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, java.lang.String tokenDec) throws ApiException, org.apache.thrift.TException
    {
      send_verifyToken(messageId, accessToken, meterConfig, tokenDec);
      return recv_verifyToken();
    }

    public void send_verifyToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, java.lang.String tokenDec) throws org.apache.thrift.TException
    {
      verifyToken_args args = new verifyToken_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setMeterConfig(meterConfig);
      args.setTokenDec(tokenDec);
      sendBase("verifyToken", args);
    }

    public VerifyResult recv_verifyToken() throws ApiException, org.apache.thrift.TException
    {
      verifyToken_result result = new verifyToken_result();
      receiveBase(result, "verifyToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyToken failed: unknown result");
    }

    public java.util.List<Token> issueDitkChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig) throws ApiException, org.apache.thrift.TException
    {
      send_issueDitkChangeTokens(messageId, accessToken, meterConfig);
      return recv_issueDitkChangeTokens();
    }

    public void send_issueDitkChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig) throws org.apache.thrift.TException
    {
      issueDitkChangeTokens_args args = new issueDitkChangeTokens_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setMeterConfig(meterConfig);
      sendBase("issueDitkChangeTokens", args);
    }

    public java.util.List<Token> recv_issueDitkChangeTokens() throws ApiException, org.apache.thrift.TException
    {
      issueDitkChangeTokens_result result = new issueDitkChangeTokens_result();
      receiveBase(result, "issueDitkChangeTokens");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueDitkChangeTokens failed: unknown result");
    }

    public java.util.List<Token> fetchTokenResult(java.lang.String messageId, java.lang.String accessToken, java.lang.String reqMessageId) throws ApiException, org.apache.thrift.TException
    {
      send_fetchTokenResult(messageId, accessToken, reqMessageId);
      return recv_fetchTokenResult();
    }

    public void send_fetchTokenResult(java.lang.String messageId, java.lang.String accessToken, java.lang.String reqMessageId) throws org.apache.thrift.TException
    {
      fetchTokenResult_args args = new fetchTokenResult_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setReqMessageId(reqMessageId);
      sendBase("fetchTokenResult", args);
    }

    public java.util.List<Token> recv_fetchTokenResult() throws ApiException, org.apache.thrift.TException
    {
      fetchTokenResult_result result = new fetchTokenResult_result();
      receiveBase(result, "fetchTokenResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchTokenResult failed: unknown result");
    }

    public java.util.List<java.lang.String> ctsResetTidList(java.lang.String messageId, java.lang.String accessToken, java.lang.String panPattern) throws ApiException, org.apache.thrift.TException
    {
      send_ctsResetTidList(messageId, accessToken, panPattern);
      return recv_ctsResetTidList();
    }

    public void send_ctsResetTidList(java.lang.String messageId, java.lang.String accessToken, java.lang.String panPattern) throws org.apache.thrift.TException
    {
      ctsResetTidList_args args = new ctsResetTidList_args();
      args.setMessageId(messageId);
      args.setAccessToken(accessToken);
      args.setPanPattern(panPattern);
      sendBase("ctsResetTidList", args);
    }

    public java.util.List<java.lang.String> recv_ctsResetTidList() throws ApiException, org.apache.thrift.TException
    {
      ctsResetTidList_result result = new ctsResetTidList_result();
      receiveBase(result, "ctsResetTidList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex1 != null) {
        throw result.ex1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ctsResetTidList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(int sleepMs, java.lang.String echo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(sleepMs, echo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int sleepMs;
      private java.lang.String echo;
      public ping_call(int sleepMs, java.lang.String echo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sleepMs = sleepMs;
        this.echo = echo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setSleepMs(sleepMs);
        args.setEcho(echo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void signInWithPassword(java.lang.String messageId, java.lang.String realm, java.lang.String username, java.lang.String password, SessionOptions sessionOpts, org.apache.thrift.async.AsyncMethodCallback<SignInResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signInWithPassword_call method_call = new signInWithPassword_call(messageId, realm, username, password, sessionOpts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signInWithPassword_call extends org.apache.thrift.async.TAsyncMethodCall<SignInResult> {
      private java.lang.String messageId;
      private java.lang.String realm;
      private java.lang.String username;
      private java.lang.String password;
      private SessionOptions sessionOpts;
      public signInWithPassword_call(java.lang.String messageId, java.lang.String realm, java.lang.String username, java.lang.String password, SessionOptions sessionOpts, org.apache.thrift.async.AsyncMethodCallback<SignInResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.realm = realm;
        this.username = username;
        this.password = password;
        this.sessionOpts = sessionOpts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signInWithPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signInWithPassword_args args = new signInWithPassword_args();
        args.setMessageId(messageId);
        args.setRealm(realm);
        args.setUsername(username);
        args.setPassword(password);
        args.setSessionOpts(sessionOpts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SignInResult getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signInWithPassword();
      }
    }

    public void getStatus(java.lang.String messageId, java.lang.String accessToken, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeStatus>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStatus_call method_call = new getStatus_call(messageId, accessToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NodeStatus>> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      public getStatus_call(java.lang.String messageId, java.lang.String accessToken, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeStatus>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStatus_args args = new getStatus_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<NodeStatus> getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatus();
      }
    }

    public void parseIdRecord(java.lang.String messageId, java.lang.String accessToken, java.lang.String idRecord, org.apache.thrift.async.AsyncMethodCallback<MeterConfigIn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parseIdRecord_call method_call = new parseIdRecord_call(messageId, accessToken, idRecord, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parseIdRecord_call extends org.apache.thrift.async.TAsyncMethodCall<MeterConfigIn> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private java.lang.String idRecord;
      public parseIdRecord_call(java.lang.String messageId, java.lang.String accessToken, java.lang.String idRecord, org.apache.thrift.async.AsyncMethodCallback<MeterConfigIn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.idRecord = idRecord;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseIdRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parseIdRecord_args args = new parseIdRecord_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setIdRecord(idRecord);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MeterConfigIn getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parseIdRecord();
      }
    }

    public void issueCreditToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueCreditToken_call method_call = new issueCreditToken_call(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueCreditToken_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Token>> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private MeterConfigIn meterConfig;
      private short subclass;
      private double transferAmount;
      private long tokenTime;
      private long flags;
      public issueCreditToken_call(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.meterConfig = meterConfig;
        this.subclass = subclass;
        this.transferAmount = transferAmount;
        this.tokenTime = tokenTime;
        this.flags = flags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueCreditToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueCreditToken_args args = new issueCreditToken_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setMeterConfig(meterConfig);
        args.setSubclass(subclass);
        args.setTransferAmount(transferAmount);
        args.setTokenTime(tokenTime);
        args.setFlags(flags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Token> getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issueCreditToken();
      }
    }

    public void issueMeterTestToken(java.lang.String messageId, java.lang.String accessToken, short subclass, long control, short mfrcode, org.apache.thrift.async.AsyncMethodCallback<MeterTestToken> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueMeterTestToken_call method_call = new issueMeterTestToken_call(messageId, accessToken, subclass, control, mfrcode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueMeterTestToken_call extends org.apache.thrift.async.TAsyncMethodCall<MeterTestToken> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private short subclass;
      private long control;
      private short mfrcode;
      public issueMeterTestToken_call(java.lang.String messageId, java.lang.String accessToken, short subclass, long control, short mfrcode, org.apache.thrift.async.AsyncMethodCallback<MeterTestToken> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.subclass = subclass;
        this.control = control;
        this.mfrcode = mfrcode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueMeterTestToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueMeterTestToken_args args = new issueMeterTestToken_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setSubclass(subclass);
        args.setControl(control);
        args.setMfrcode(mfrcode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MeterTestToken getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issueMeterTestToken();
      }
    }

    public void issueMseToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueMseToken_call method_call = new issueMseToken_call(messageId, accessToken, meterConfig, subclass, transferAmount, tokenTime, flags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueMseToken_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Token>> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private MeterConfigIn meterConfig;
      private short subclass;
      private double transferAmount;
      private long tokenTime;
      private long flags;
      public issueMseToken_call(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, short subclass, double transferAmount, long tokenTime, long flags, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.meterConfig = meterConfig;
        this.subclass = subclass;
        this.transferAmount = transferAmount;
        this.tokenTime = tokenTime;
        this.flags = flags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueMseToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueMseToken_args args = new issueMseToken_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setMeterConfig(meterConfig);
        args.setSubclass(subclass);
        args.setTransferAmount(transferAmount);
        args.setTokenTime(tokenTime);
        args.setFlags(flags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Token> getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issueMseToken();
      }
    }

    public void issueKeyChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, MeterConfigAmendment newConfig, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueKeyChangeTokens_call method_call = new issueKeyChangeTokens_call(messageId, accessToken, meterConfig, newConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueKeyChangeTokens_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Token>> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private MeterConfigIn meterConfig;
      private MeterConfigAmendment newConfig;
      public issueKeyChangeTokens_call(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, MeterConfigAmendment newConfig, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.meterConfig = meterConfig;
        this.newConfig = newConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueKeyChangeTokens", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueKeyChangeTokens_args args = new issueKeyChangeTokens_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setMeterConfig(meterConfig);
        args.setNewConfig(newConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Token> getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issueKeyChangeTokens();
      }
    }

    public void verifyToken(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, java.lang.String tokenDec, org.apache.thrift.async.AsyncMethodCallback<VerifyResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyToken_call method_call = new verifyToken_call(messageId, accessToken, meterConfig, tokenDec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyToken_call extends org.apache.thrift.async.TAsyncMethodCall<VerifyResult> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private MeterConfigIn meterConfig;
      private java.lang.String tokenDec;
      public verifyToken_call(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, java.lang.String tokenDec, org.apache.thrift.async.AsyncMethodCallback<VerifyResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.meterConfig = meterConfig;
        this.tokenDec = tokenDec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyToken_args args = new verifyToken_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setMeterConfig(meterConfig);
        args.setTokenDec(tokenDec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public VerifyResult getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyToken();
      }
    }

    public void issueDitkChangeTokens(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueDitkChangeTokens_call method_call = new issueDitkChangeTokens_call(messageId, accessToken, meterConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueDitkChangeTokens_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Token>> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private MeterConfigIn meterConfig;
      public issueDitkChangeTokens_call(java.lang.String messageId, java.lang.String accessToken, MeterConfigIn meterConfig, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.meterConfig = meterConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueDitkChangeTokens", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueDitkChangeTokens_args args = new issueDitkChangeTokens_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setMeterConfig(meterConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Token> getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issueDitkChangeTokens();
      }
    }

    public void fetchTokenResult(java.lang.String messageId, java.lang.String accessToken, java.lang.String reqMessageId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchTokenResult_call method_call = new fetchTokenResult_call(messageId, accessToken, reqMessageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchTokenResult_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Token>> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private java.lang.String reqMessageId;
      public fetchTokenResult_call(java.lang.String messageId, java.lang.String accessToken, java.lang.String reqMessageId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.reqMessageId = reqMessageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchTokenResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchTokenResult_args args = new fetchTokenResult_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setReqMessageId(reqMessageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Token> getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchTokenResult();
      }
    }

    public void ctsResetTidList(java.lang.String messageId, java.lang.String accessToken, java.lang.String panPattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ctsResetTidList_call method_call = new ctsResetTidList_call(messageId, accessToken, panPattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ctsResetTidList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String messageId;
      private java.lang.String accessToken;
      private java.lang.String panPattern;
      public ctsResetTidList_call(java.lang.String messageId, java.lang.String accessToken, java.lang.String panPattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.accessToken = accessToken;
        this.panPattern = panPattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ctsResetTidList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ctsResetTidList_args args = new ctsResetTidList_args();
        args.setMessageId(messageId);
        args.setAccessToken(accessToken);
        args.setPanPattern(panPattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws ApiException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ctsResetTidList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("signInWithPassword", new signInWithPassword());
      processMap.put("getStatus", new getStatus());
      processMap.put("parseIdRecord", new parseIdRecord());
      processMap.put("issueCreditToken", new issueCreditToken());
      processMap.put("issueMeterTestToken", new issueMeterTestToken());
      processMap.put("issueMseToken", new issueMseToken());
      processMap.put("issueKeyChangeTokens", new issueKeyChangeTokens());
      processMap.put("verifyToken", new verifyToken());
      processMap.put("issueDitkChangeTokens", new issueDitkChangeTokens());
      processMap.put("fetchTokenResult", new fetchTokenResult());
      processMap.put("ctsResetTidList", new ctsResetTidList());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          result.success = iface.ping(args.sleepMs, args.echo);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class signInWithPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signInWithPassword_args> {
      public signInWithPassword() {
        super("signInWithPassword");
      }

      public signInWithPassword_args getEmptyArgsInstance() {
        return new signInWithPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public signInWithPassword_result getResult(I iface, signInWithPassword_args args) throws org.apache.thrift.TException {
        signInWithPassword_result result = new signInWithPassword_result();
        try {
          result.success = iface.signInWithPassword(args.messageId, args.realm, args.username, args.password, args.sessionOpts);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class getStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStatus_args> {
      public getStatus() {
        super("getStatus");
      }

      public getStatus_args getEmptyArgsInstance() {
        return new getStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getStatus_result getResult(I iface, getStatus_args args) throws org.apache.thrift.TException {
        getStatus_result result = new getStatus_result();
        try {
          result.success = iface.getStatus(args.messageId, args.accessToken);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class parseIdRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseIdRecord_args> {
      public parseIdRecord() {
        super("parseIdRecord");
      }

      public parseIdRecord_args getEmptyArgsInstance() {
        return new parseIdRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public parseIdRecord_result getResult(I iface, parseIdRecord_args args) throws org.apache.thrift.TException {
        parseIdRecord_result result = new parseIdRecord_result();
        try {
          result.success = iface.parseIdRecord(args.messageId, args.accessToken, args.idRecord);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class issueCreditToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueCreditToken_args> {
      public issueCreditToken() {
        super("issueCreditToken");
      }

      public issueCreditToken_args getEmptyArgsInstance() {
        return new issueCreditToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public issueCreditToken_result getResult(I iface, issueCreditToken_args args) throws org.apache.thrift.TException {
        issueCreditToken_result result = new issueCreditToken_result();
        try {
          result.success = iface.issueCreditToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class issueMeterTestToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueMeterTestToken_args> {
      public issueMeterTestToken() {
        super("issueMeterTestToken");
      }

      public issueMeterTestToken_args getEmptyArgsInstance() {
        return new issueMeterTestToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public issueMeterTestToken_result getResult(I iface, issueMeterTestToken_args args) throws org.apache.thrift.TException {
        issueMeterTestToken_result result = new issueMeterTestToken_result();
        try {
          result.success = iface.issueMeterTestToken(args.messageId, args.accessToken, args.subclass, args.control, args.mfrcode);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class issueMseToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueMseToken_args> {
      public issueMseToken() {
        super("issueMseToken");
      }

      public issueMseToken_args getEmptyArgsInstance() {
        return new issueMseToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public issueMseToken_result getResult(I iface, issueMseToken_args args) throws org.apache.thrift.TException {
        issueMseToken_result result = new issueMseToken_result();
        try {
          result.success = iface.issueMseToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class issueKeyChangeTokens<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueKeyChangeTokens_args> {
      public issueKeyChangeTokens() {
        super("issueKeyChangeTokens");
      }

      public issueKeyChangeTokens_args getEmptyArgsInstance() {
        return new issueKeyChangeTokens_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public issueKeyChangeTokens_result getResult(I iface, issueKeyChangeTokens_args args) throws org.apache.thrift.TException {
        issueKeyChangeTokens_result result = new issueKeyChangeTokens_result();
        try {
          result.success = iface.issueKeyChangeTokens(args.messageId, args.accessToken, args.meterConfig, args.newConfig);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class verifyToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyToken_args> {
      public verifyToken() {
        super("verifyToken");
      }

      public verifyToken_args getEmptyArgsInstance() {
        return new verifyToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public verifyToken_result getResult(I iface, verifyToken_args args) throws org.apache.thrift.TException {
        verifyToken_result result = new verifyToken_result();
        try {
          result.success = iface.verifyToken(args.messageId, args.accessToken, args.meterConfig, args.tokenDec);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class issueDitkChangeTokens<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueDitkChangeTokens_args> {
      public issueDitkChangeTokens() {
        super("issueDitkChangeTokens");
      }

      public issueDitkChangeTokens_args getEmptyArgsInstance() {
        return new issueDitkChangeTokens_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public issueDitkChangeTokens_result getResult(I iface, issueDitkChangeTokens_args args) throws org.apache.thrift.TException {
        issueDitkChangeTokens_result result = new issueDitkChangeTokens_result();
        try {
          result.success = iface.issueDitkChangeTokens(args.messageId, args.accessToken, args.meterConfig);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class fetchTokenResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchTokenResult_args> {
      public fetchTokenResult() {
        super("fetchTokenResult");
      }

      public fetchTokenResult_args getEmptyArgsInstance() {
        return new fetchTokenResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public fetchTokenResult_result getResult(I iface, fetchTokenResult_args args) throws org.apache.thrift.TException {
        fetchTokenResult_result result = new fetchTokenResult_result();
        try {
          result.success = iface.fetchTokenResult(args.messageId, args.accessToken, args.reqMessageId);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

    public static class ctsResetTidList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ctsResetTidList_args> {
      public ctsResetTidList() {
        super("ctsResetTidList");
      }

      public ctsResetTidList_args getEmptyArgsInstance() {
        return new ctsResetTidList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ctsResetTidList_result getResult(I iface, ctsResetTidList_args args) throws org.apache.thrift.TException {
        ctsResetTidList_result result = new ctsResetTidList_result();
        try {
          result.success = iface.ctsResetTidList(args.messageId, args.accessToken, args.panPattern);
        } catch (ApiException ex1) {
          result.ex1 = ex1;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("signInWithPassword", new signInWithPassword());
      processMap.put("getStatus", new getStatus());
      processMap.put("parseIdRecord", new parseIdRecord());
      processMap.put("issueCreditToken", new issueCreditToken());
      processMap.put("issueMeterTestToken", new issueMeterTestToken());
      processMap.put("issueMseToken", new issueMseToken());
      processMap.put("issueKeyChangeTokens", new issueKeyChangeTokens());
      processMap.put("verifyToken", new verifyToken());
      processMap.put("issueDitkChangeTokens", new issueDitkChangeTokens());
      processMap.put("fetchTokenResult", new fetchTokenResult());
      processMap.put("ctsResetTidList", new ctsResetTidList());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.String> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.ping(args.sleepMs, args.echo,resultHandler);
      }
    }

    public static class signInWithPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signInWithPassword_args, SignInResult> {
      public signInWithPassword() {
        super("signInWithPassword");
      }

      public signInWithPassword_args getEmptyArgsInstance() {
        return new signInWithPassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SignInResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SignInResult>() {
          public void onComplete(SignInResult o) {
            signInWithPassword_result result = new signInWithPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            signInWithPassword_result result = new signInWithPassword_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signInWithPassword_args args, org.apache.thrift.async.AsyncMethodCallback<SignInResult> resultHandler) throws org.apache.thrift.TException {
        iface.signInWithPassword(args.messageId, args.realm, args.username, args.password, args.sessionOpts,resultHandler);
      }
    }

    public static class getStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStatus_args, java.util.List<NodeStatus>> {
      public getStatus() {
        super("getStatus");
      }

      public getStatus_args getEmptyArgsInstance() {
        return new getStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeStatus>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeStatus>>() {
          public void onComplete(java.util.List<NodeStatus> o) {
            getStatus_result result = new getStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getStatus_result result = new getStatus_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NodeStatus>> resultHandler) throws org.apache.thrift.TException {
        iface.getStatus(args.messageId, args.accessToken,resultHandler);
      }
    }

    public static class parseIdRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseIdRecord_args, MeterConfigIn> {
      public parseIdRecord() {
        super("parseIdRecord");
      }

      public parseIdRecord_args getEmptyArgsInstance() {
        return new parseIdRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MeterConfigIn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MeterConfigIn>() {
          public void onComplete(MeterConfigIn o) {
            parseIdRecord_result result = new parseIdRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parseIdRecord_result result = new parseIdRecord_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parseIdRecord_args args, org.apache.thrift.async.AsyncMethodCallback<MeterConfigIn> resultHandler) throws org.apache.thrift.TException {
        iface.parseIdRecord(args.messageId, args.accessToken, args.idRecord,resultHandler);
      }
    }

    public static class issueCreditToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueCreditToken_args, java.util.List<Token>> {
      public issueCreditToken() {
        super("issueCreditToken");
      }

      public issueCreditToken_args getEmptyArgsInstance() {
        return new issueCreditToken_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>>() {
          public void onComplete(java.util.List<Token> o) {
            issueCreditToken_result result = new issueCreditToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            issueCreditToken_result result = new issueCreditToken_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueCreditToken_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
        iface.issueCreditToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags,resultHandler);
      }
    }

    public static class issueMeterTestToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueMeterTestToken_args, MeterTestToken> {
      public issueMeterTestToken() {
        super("issueMeterTestToken");
      }

      public issueMeterTestToken_args getEmptyArgsInstance() {
        return new issueMeterTestToken_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<MeterTestToken> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<MeterTestToken>() {
          public void onComplete(MeterTestToken o) {
            issueMeterTestToken_result result = new issueMeterTestToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            issueMeterTestToken_result result = new issueMeterTestToken_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueMeterTestToken_args args, org.apache.thrift.async.AsyncMethodCallback<MeterTestToken> resultHandler) throws org.apache.thrift.TException {
        iface.issueMeterTestToken(args.messageId, args.accessToken, args.subclass, args.control, args.mfrcode,resultHandler);
      }
    }

    public static class issueMseToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueMseToken_args, java.util.List<Token>> {
      public issueMseToken() {
        super("issueMseToken");
      }

      public issueMseToken_args getEmptyArgsInstance() {
        return new issueMseToken_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>>() {
          public void onComplete(java.util.List<Token> o) {
            issueMseToken_result result = new issueMseToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            issueMseToken_result result = new issueMseToken_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueMseToken_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
        iface.issueMseToken(args.messageId, args.accessToken, args.meterConfig, args.subclass, args.transferAmount, args.tokenTime, args.flags,resultHandler);
      }
    }

    public static class issueKeyChangeTokens<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueKeyChangeTokens_args, java.util.List<Token>> {
      public issueKeyChangeTokens() {
        super("issueKeyChangeTokens");
      }

      public issueKeyChangeTokens_args getEmptyArgsInstance() {
        return new issueKeyChangeTokens_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>>() {
          public void onComplete(java.util.List<Token> o) {
            issueKeyChangeTokens_result result = new issueKeyChangeTokens_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            issueKeyChangeTokens_result result = new issueKeyChangeTokens_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueKeyChangeTokens_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
        iface.issueKeyChangeTokens(args.messageId, args.accessToken, args.meterConfig, args.newConfig,resultHandler);
      }
    }

    public static class verifyToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyToken_args, VerifyResult> {
      public verifyToken() {
        super("verifyToken");
      }

      public verifyToken_args getEmptyArgsInstance() {
        return new verifyToken_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<VerifyResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<VerifyResult>() {
          public void onComplete(VerifyResult o) {
            verifyToken_result result = new verifyToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            verifyToken_result result = new verifyToken_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyToken_args args, org.apache.thrift.async.AsyncMethodCallback<VerifyResult> resultHandler) throws org.apache.thrift.TException {
        iface.verifyToken(args.messageId, args.accessToken, args.meterConfig, args.tokenDec,resultHandler);
      }
    }

    public static class issueDitkChangeTokens<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueDitkChangeTokens_args, java.util.List<Token>> {
      public issueDitkChangeTokens() {
        super("issueDitkChangeTokens");
      }

      public issueDitkChangeTokens_args getEmptyArgsInstance() {
        return new issueDitkChangeTokens_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>>() {
          public void onComplete(java.util.List<Token> o) {
            issueDitkChangeTokens_result result = new issueDitkChangeTokens_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            issueDitkChangeTokens_result result = new issueDitkChangeTokens_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueDitkChangeTokens_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
        iface.issueDitkChangeTokens(args.messageId, args.accessToken, args.meterConfig,resultHandler);
      }
    }

    public static class fetchTokenResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchTokenResult_args, java.util.List<Token>> {
      public fetchTokenResult() {
        super("fetchTokenResult");
      }

      public fetchTokenResult_args getEmptyArgsInstance() {
        return new fetchTokenResult_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>>() {
          public void onComplete(java.util.List<Token> o) {
            fetchTokenResult_result result = new fetchTokenResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchTokenResult_result result = new fetchTokenResult_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchTokenResult_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Token>> resultHandler) throws org.apache.thrift.TException {
        iface.fetchTokenResult(args.messageId, args.accessToken, args.reqMessageId,resultHandler);
      }
    }

    public static class ctsResetTidList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ctsResetTidList_args, java.util.List<java.lang.String>> {
      public ctsResetTidList() {
        super("ctsResetTidList");
      }

      public ctsResetTidList_args getEmptyArgsInstance() {
        return new ctsResetTidList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() {
          public void onComplete(java.util.List<java.lang.String> o) {
            ctsResetTidList_result result = new ctsResetTidList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ctsResetTidList_result result = new ctsResetTidList_result();
            if (e instanceof ApiException) {
              result.ex1 = (ApiException) e;
              result.setEx1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ctsResetTidList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.ctsResetTidList(args.messageId, args.accessToken, args.panPattern,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField SLEEP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("sleepMs", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ECHO_FIELD_DESC = new org.apache.thrift.protocol.TField("echo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();

    public int sleepMs; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String echo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SLEEP_MS((short)1, "sleepMs"),
      ECHO((short)2, "echo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SLEEP_MS
            return SLEEP_MS;
          case 2: // ECHO
            return ECHO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SLEEPMS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SLEEP_MS, new org.apache.thrift.meta_data.FieldMetaData("sleepMs", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ECHO, new org.apache.thrift.meta_data.FieldMetaData("echo", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      int sleepMs,
      java.lang.String echo)
    {
      this();
      this.sleepMs = sleepMs;
      setSleepMsIsSet(true);
      this.echo = echo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sleepMs = other.sleepMs;
      if (other.isSetEcho()) {
        this.echo = other.echo;
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      setSleepMsIsSet(false);
      this.sleepMs = 0;
      this.echo = null;
    }

    public int getSleepMs() {
      return this.sleepMs;
    }

    public ping_args setSleepMs(int sleepMs) {
      this.sleepMs = sleepMs;
      setSleepMsIsSet(true);
      return this;
    }

    public void unsetSleepMs() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLEEPMS_ISSET_ID);
    }

    /** Returns true if field sleepMs is set (has been assigned a value) and false otherwise */
    public boolean isSetSleepMs() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLEEPMS_ISSET_ID);
    }

    public void setSleepMsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLEEPMS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEcho() {
      return this.echo;
    }

    public ping_args setEcho(@org.apache.thrift.annotation.Nullable java.lang.String echo) {
      this.echo = echo;
      return this;
    }

    public void unsetEcho() {
      this.echo = null;
    }

    /** Returns true if field echo is set (has been assigned a value) and false otherwise */
    public boolean isSetEcho() {
      return this.echo != null;
    }

    public void setEchoIsSet(boolean value) {
      if (!value) {
        this.echo = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SLEEP_MS:
        if (value == null) {
          unsetSleepMs();
        } else {
          setSleepMs((java.lang.Integer)value);
        }
        break;

      case ECHO:
        if (value == null) {
          unsetEcho();
        } else {
          setEcho((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SLEEP_MS:
        return getSleepMs();

      case ECHO:
        return getEcho();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SLEEP_MS:
        return isSetSleepMs();
      case ECHO:
        return isSetEcho();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sleepMs = true;
      boolean that_present_sleepMs = true;
      if (this_present_sleepMs || that_present_sleepMs) {
        if (!(this_present_sleepMs && that_present_sleepMs))
          return false;
        if (this.sleepMs != that.sleepMs)
          return false;
      }

      boolean this_present_echo = true && this.isSetEcho();
      boolean that_present_echo = true && that.isSetEcho();
      if (this_present_echo || that_present_echo) {
        if (!(this_present_echo && that_present_echo))
          return false;
        if (!this.echo.equals(that.echo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + sleepMs;

      hashCode = hashCode * 8191 + ((isSetEcho()) ? 131071 : 524287);
      if (isSetEcho())
        hashCode = hashCode * 8191 + echo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSleepMs()).compareTo(other.isSetSleepMs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSleepMs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sleepMs, other.sleepMs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEcho()).compareTo(other.isSetEcho());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEcho()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.echo, other.echo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append("sleepMs:");
      sb.append(this.sleepMs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("echo:");
      if (this.echo == null) {
        sb.append("null");
      } else {
        sb.append(this.echo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'sleepMs' because it's a primitive and you chose the non-beans generator.
      if (echo == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'echo' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // SLEEP_MS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sleepMs = iprot.readI32();
                struct.setSleepMsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ECHO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.echo = iprot.readString();
                struct.setEchoIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSleepMs()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'sleepMs' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SLEEP_MS_FIELD_DESC);
        oprot.writeI32(struct.sleepMs);
        oprot.writeFieldEnd();
        if (struct.echo != null) {
          oprot.writeFieldBegin(ECHO_FIELD_DESC);
          oprot.writeString(struct.echo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeI32(struct.sleepMs);
        oprot.writeString(struct.echo);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.sleepMs = iprot.readI32();
        struct.setSleepMsIsSet(true);
        struct.echo = iprot.readString();
        struct.setEchoIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      java.lang.String success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public ping_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class signInWithPassword_args implements org.apache.thrift.TBase<signInWithPassword_args, signInWithPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<signInWithPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signInWithPassword_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REALM_FIELD_DESC = new org.apache.thrift.protocol.TField("realm", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SESSION_OPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionOpts", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new signInWithPassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new signInWithPassword_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String realm; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String password; // required
    public @org.apache.thrift.annotation.Nullable SessionOptions sessionOpts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      REALM((short)2, "realm"),
      USERNAME((short)3, "username"),
      PASSWORD((short)4, "password"),
      SESSION_OPTS((short)5, "sessionOpts");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // REALM
            return REALM;
          case 3: // USERNAME
            return USERNAME;
          case 4: // PASSWORD
            return PASSWORD;
          case 5: // SESSION_OPTS
            return SESSION_OPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REALM, new org.apache.thrift.meta_data.FieldMetaData("realm", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION_OPTS, new org.apache.thrift.meta_data.FieldMetaData("sessionOpts", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionOptions.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signInWithPassword_args.class, metaDataMap);
    }

    public signInWithPassword_args() {
    }

    public signInWithPassword_args(
      java.lang.String messageId,
      java.lang.String realm,
      java.lang.String username,
      java.lang.String password,
      SessionOptions sessionOpts)
    {
      this();
      this.messageId = messageId;
      this.realm = realm;
      this.username = username;
      this.password = password;
      this.sessionOpts = sessionOpts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signInWithPassword_args(signInWithPassword_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetRealm()) {
        this.realm = other.realm;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetSessionOpts()) {
        this.sessionOpts = new SessionOptions(other.sessionOpts);
      }
    }

    public signInWithPassword_args deepCopy() {
      return new signInWithPassword_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.realm = null;
      this.username = null;
      this.password = null;
      this.sessionOpts = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public signInWithPassword_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRealm() {
      return this.realm;
    }

    public signInWithPassword_args setRealm(@org.apache.thrift.annotation.Nullable java.lang.String realm) {
      this.realm = realm;
      return this;
    }

    public void unsetRealm() {
      this.realm = null;
    }

    /** Returns true if field realm is set (has been assigned a value) and false otherwise */
    public boolean isSetRealm() {
      return this.realm != null;
    }

    public void setRealmIsSet(boolean value) {
      if (!value) {
        this.realm = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsername() {
      return this.username;
    }

    public signInWithPassword_args setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
      return this.password;
    }

    public signInWithPassword_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public SessionOptions getSessionOpts() {
      return this.sessionOpts;
    }

    public signInWithPassword_args setSessionOpts(@org.apache.thrift.annotation.Nullable SessionOptions sessionOpts) {
      this.sessionOpts = sessionOpts;
      return this;
    }

    public void unsetSessionOpts() {
      this.sessionOpts = null;
    }

    /** Returns true if field sessionOpts is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionOpts() {
      return this.sessionOpts != null;
    }

    public void setSessionOptsIsSet(boolean value) {
      if (!value) {
        this.sessionOpts = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case REALM:
        if (value == null) {
          unsetRealm();
        } else {
          setRealm((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case SESSION_OPTS:
        if (value == null) {
          unsetSessionOpts();
        } else {
          setSessionOpts((SessionOptions)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case REALM:
        return getRealm();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case SESSION_OPTS:
        return getSessionOpts();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case REALM:
        return isSetRealm();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case SESSION_OPTS:
        return isSetSessionOpts();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof signInWithPassword_args)
        return this.equals((signInWithPassword_args)that);
      return false;
    }

    public boolean equals(signInWithPassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_realm = true && this.isSetRealm();
      boolean that_present_realm = true && that.isSetRealm();
      if (this_present_realm || that_present_realm) {
        if (!(this_present_realm && that_present_realm))
          return false;
        if (!this.realm.equals(that.realm))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_sessionOpts = true && this.isSetSessionOpts();
      boolean that_present_sessionOpts = true && that.isSetSessionOpts();
      if (this_present_sessionOpts || that_present_sessionOpts) {
        if (!(this_present_sessionOpts && that_present_sessionOpts))
          return false;
        if (!this.sessionOpts.equals(that.sessionOpts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRealm()) ? 131071 : 524287);
      if (isSetRealm())
        hashCode = hashCode * 8191 + realm.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetSessionOpts()) ? 131071 : 524287);
      if (isSetSessionOpts())
        hashCode = hashCode * 8191 + sessionOpts.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(signInWithPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRealm()).compareTo(other.isSetRealm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRealm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realm, other.realm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionOpts()).compareTo(other.isSetSessionOpts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionOpts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionOpts, other.sessionOpts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("signInWithPassword_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("realm:");
      if (this.realm == null) {
        sb.append("null");
      } else {
        sb.append(this.realm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionOpts:");
      if (this.sessionOpts == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionOpts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (realm == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'realm' was not present! Struct: " + toString());
      }
      if (username == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      if (sessionOpts == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionOpts' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (sessionOpts != null) {
        sessionOpts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signInWithPassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public signInWithPassword_argsStandardScheme getScheme() {
        return new signInWithPassword_argsStandardScheme();
      }
    }

    private static class signInWithPassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<signInWithPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signInWithPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REALM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.realm = iprot.readString();
                struct.setRealmIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SESSION_OPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionOpts = new SessionOptions();
                struct.sessionOpts.read(iprot);
                struct.setSessionOptsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signInWithPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.realm != null) {
          oprot.writeFieldBegin(REALM_FIELD_DESC);
          oprot.writeString(struct.realm);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.sessionOpts != null) {
          oprot.writeFieldBegin(SESSION_OPTS_FIELD_DESC);
          struct.sessionOpts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signInWithPassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public signInWithPassword_argsTupleScheme getScheme() {
        return new signInWithPassword_argsTupleScheme();
      }
    }

    private static class signInWithPassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<signInWithPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signInWithPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.realm);
        oprot.writeString(struct.username);
        oprot.writeString(struct.password);
        struct.sessionOpts.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signInWithPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.realm = iprot.readString();
        struct.setRealmIsSet(true);
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
        struct.sessionOpts = new SessionOptions();
        struct.sessionOpts.read(iprot);
        struct.setSessionOptsIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class signInWithPassword_result implements org.apache.thrift.TBase<signInWithPassword_result, signInWithPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<signInWithPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signInWithPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new signInWithPassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new signInWithPassword_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SignInResult success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SignInResult.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signInWithPassword_result.class, metaDataMap);
    }

    public signInWithPassword_result() {
    }

    public signInWithPassword_result(
      SignInResult success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signInWithPassword_result(signInWithPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new SignInResult(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public signInWithPassword_result deepCopy() {
      return new signInWithPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SignInResult getSuccess() {
      return this.success;
    }

    public signInWithPassword_result setSuccess(@org.apache.thrift.annotation.Nullable SignInResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public signInWithPassword_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SignInResult)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof signInWithPassword_result)
        return this.equals((signInWithPassword_result)that);
      return false;
    }

    public boolean equals(signInWithPassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(signInWithPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("signInWithPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signInWithPassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public signInWithPassword_resultStandardScheme getScheme() {
        return new signInWithPassword_resultStandardScheme();
      }
    }

    private static class signInWithPassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<signInWithPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signInWithPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SignInResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signInWithPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signInWithPassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public signInWithPassword_resultTupleScheme getScheme() {
        return new signInWithPassword_resultTupleScheme();
      }
    }

    private static class signInWithPassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<signInWithPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signInWithPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signInWithPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SignInResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStatus_args implements org.apache.thrift.TBase<getStatus_args, getStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_args.class, metaDataMap);
    }

    public getStatus_args() {
    }

    public getStatus_args(
      java.lang.String messageId,
      java.lang.String accessToken)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_args(getStatus_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
    }

    public getStatus_args deepCopy() {
      return new getStatus_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public getStatus_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public getStatus_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_args)
        return this.equals((getStatus_args)that);
      return false;
    }

    public boolean equals(getStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_argsStandardScheme getScheme() {
        return new getStatus_argsStandardScheme();
      }
    }

    private static class getStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_argsTupleScheme getScheme() {
        return new getStatus_argsTupleScheme();
      }
    }

    private static class getStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStatus_result implements org.apache.thrift.TBase<getStatus_result, getStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<NodeStatus> success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeStatus.class))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_result.class, metaDataMap);
    }

    public getStatus_result() {
    }

    public getStatus_result(
      java.util.List<NodeStatus> success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_result(getStatus_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NodeStatus> __this__success = new java.util.ArrayList<NodeStatus>(other.success.size());
        for (NodeStatus other_element : other.success) {
          __this__success.add(new NodeStatus(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public getStatus_result deepCopy() {
      return new getStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<NodeStatus> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NodeStatus elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NodeStatus>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<NodeStatus> getSuccess() {
      return this.success;
    }

    public getStatus_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<NodeStatus> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public getStatus_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NodeStatus>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_result)
        return this.equals((getStatus_result)that);
      return false;
    }

    public boolean equals(getStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_resultStandardScheme getScheme() {
        return new getStatus_resultStandardScheme();
      }
    }

    private static class getStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NodeStatus>(_list18.size);
                  @org.apache.thrift.annotation.Nullable NodeStatus _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    _elem19 = new NodeStatus();
                    _elem19.read(iprot);
                    struct.success.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NodeStatus _iter21 : struct.success)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_resultTupleScheme getScheme() {
        return new getStatus_resultTupleScheme();
      }
    }

    private static class getStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NodeStatus _iter22 : struct.success)
            {
              _iter22.write(oprot);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<NodeStatus>(_list23.size);
            @org.apache.thrift.annotation.Nullable NodeStatus _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = new NodeStatus();
              _elem24.read(iprot);
              struct.success.add(_elem24);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseIdRecord_args implements org.apache.thrift.TBase<parseIdRecord_args, parseIdRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseIdRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseIdRecord_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ID_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("idRecord", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseIdRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseIdRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String idRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      ID_RECORD((short)3, "idRecord");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // ID_RECORD
            return ID_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID_RECORD, new org.apache.thrift.meta_data.FieldMetaData("idRecord", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseIdRecord_args.class, metaDataMap);
    }

    public parseIdRecord_args() {
    }

    public parseIdRecord_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      java.lang.String idRecord)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.idRecord = idRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseIdRecord_args(parseIdRecord_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetIdRecord()) {
        this.idRecord = other.idRecord;
      }
    }

    public parseIdRecord_args deepCopy() {
      return new parseIdRecord_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.idRecord = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public parseIdRecord_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public parseIdRecord_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getIdRecord() {
      return this.idRecord;
    }

    public parseIdRecord_args setIdRecord(@org.apache.thrift.annotation.Nullable java.lang.String idRecord) {
      this.idRecord = idRecord;
      return this;
    }

    public void unsetIdRecord() {
      this.idRecord = null;
    }

    /** Returns true if field idRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetIdRecord() {
      return this.idRecord != null;
    }

    public void setIdRecordIsSet(boolean value) {
      if (!value) {
        this.idRecord = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case ID_RECORD:
        if (value == null) {
          unsetIdRecord();
        } else {
          setIdRecord((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case ID_RECORD:
        return getIdRecord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case ID_RECORD:
        return isSetIdRecord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseIdRecord_args)
        return this.equals((parseIdRecord_args)that);
      return false;
    }

    public boolean equals(parseIdRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_idRecord = true && this.isSetIdRecord();
      boolean that_present_idRecord = true && that.isSetIdRecord();
      if (this_present_idRecord || that_present_idRecord) {
        if (!(this_present_idRecord && that_present_idRecord))
          return false;
        if (!this.idRecord.equals(that.idRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetIdRecord()) ? 131071 : 524287);
      if (isSetIdRecord())
        hashCode = hashCode * 8191 + idRecord.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(parseIdRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIdRecord()).compareTo(other.isSetIdRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idRecord, other.idRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseIdRecord_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idRecord:");
      if (this.idRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.idRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (idRecord == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'idRecord' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseIdRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseIdRecord_argsStandardScheme getScheme() {
        return new parseIdRecord_argsStandardScheme();
      }
    }

    private static class parseIdRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseIdRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseIdRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idRecord = iprot.readString();
                struct.setIdRecordIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseIdRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.idRecord != null) {
          oprot.writeFieldBegin(ID_RECORD_FIELD_DESC);
          oprot.writeString(struct.idRecord);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseIdRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseIdRecord_argsTupleScheme getScheme() {
        return new parseIdRecord_argsTupleScheme();
      }
    }

    private static class parseIdRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseIdRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parseIdRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        oprot.writeString(struct.idRecord);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parseIdRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.idRecord = iprot.readString();
        struct.setIdRecordIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parseIdRecord_result implements org.apache.thrift.TBase<parseIdRecord_result, parseIdRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseIdRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseIdRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parseIdRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parseIdRecord_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MeterConfigIn success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigIn.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseIdRecord_result.class, metaDataMap);
    }

    public parseIdRecord_result() {
    }

    public parseIdRecord_result(
      MeterConfigIn success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parseIdRecord_result(parseIdRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new MeterConfigIn(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public parseIdRecord_result deepCopy() {
      return new parseIdRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MeterConfigIn getSuccess() {
      return this.success;
    }

    public parseIdRecord_result setSuccess(@org.apache.thrift.annotation.Nullable MeterConfigIn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public parseIdRecord_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MeterConfigIn)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof parseIdRecord_result)
        return this.equals((parseIdRecord_result)that);
      return false;
    }

    public boolean equals(parseIdRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(parseIdRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("parseIdRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parseIdRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseIdRecord_resultStandardScheme getScheme() {
        return new parseIdRecord_resultStandardScheme();
      }
    }

    private static class parseIdRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parseIdRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parseIdRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MeterConfigIn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parseIdRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parseIdRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parseIdRecord_resultTupleScheme getScheme() {
        return new parseIdRecord_resultTupleScheme();
      }
    }

    private static class parseIdRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parseIdRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parseIdRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parseIdRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MeterConfigIn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueCreditToken_args implements org.apache.thrift.TBase<issueCreditToken_args, issueCreditToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueCreditToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueCreditToken_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METER_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("meterConfig", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("subclass", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField TRANSFER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transferAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField TOKEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenTime", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueCreditToken_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueCreditToken_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig; // required
    public short subclass; // required
    public double transferAmount; // required
    public long tokenTime; // required
    public long flags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      METER_CONFIG((short)3, "meterConfig"),
      SUBCLASS((short)4, "subclass"),
      TRANSFER_AMOUNT((short)5, "transferAmount"),
      TOKEN_TIME((short)6, "tokenTime"),
      FLAGS((short)7, "flags");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // METER_CONFIG
            return METER_CONFIG;
          case 4: // SUBCLASS
            return SUBCLASS;
          case 5: // TRANSFER_AMOUNT
            return TRANSFER_AMOUNT;
          case 6: // TOKEN_TIME
            return TOKEN_TIME;
          case 7: // FLAGS
            return FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBCLASS_ISSET_ID = 0;
    private static final int __TRANSFERAMOUNT_ISSET_ID = 1;
    private static final int __TOKENTIME_ISSET_ID = 2;
    private static final int __FLAGS_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METER_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("meterConfig", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigIn.class)));
      tmpMap.put(_Fields.SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("subclass", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TRANSFER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transferAmount", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.TOKEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("tokenTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueCreditToken_args.class, metaDataMap);
    }

    public issueCreditToken_args() {
    }

    public issueCreditToken_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      MeterConfigIn meterConfig,
      short subclass,
      double transferAmount,
      long tokenTime,
      long flags)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.meterConfig = meterConfig;
      this.subclass = subclass;
      setSubclassIsSet(true);
      this.transferAmount = transferAmount;
      setTransferAmountIsSet(true);
      this.tokenTime = tokenTime;
      setTokenTimeIsSet(true);
      this.flags = flags;
      setFlagsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueCreditToken_args(issueCreditToken_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetMeterConfig()) {
        this.meterConfig = new MeterConfigIn(other.meterConfig);
      }
      this.subclass = other.subclass;
      this.transferAmount = other.transferAmount;
      this.tokenTime = other.tokenTime;
      this.flags = other.flags;
    }

    public issueCreditToken_args deepCopy() {
      return new issueCreditToken_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.meterConfig = null;
      setSubclassIsSet(false);
      this.subclass = 0;
      setTransferAmountIsSet(false);
      this.transferAmount = 0.0;
      setTokenTimeIsSet(false);
      this.tokenTime = 0;
      setFlagsIsSet(false);
      this.flags = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public issueCreditToken_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public issueCreditToken_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MeterConfigIn getMeterConfig() {
      return this.meterConfig;
    }

    public issueCreditToken_args setMeterConfig(@org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig) {
      this.meterConfig = meterConfig;
      return this;
    }

    public void unsetMeterConfig() {
      this.meterConfig = null;
    }

    /** Returns true if field meterConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetMeterConfig() {
      return this.meterConfig != null;
    }

    public void setMeterConfigIsSet(boolean value) {
      if (!value) {
        this.meterConfig = null;
      }
    }

    public short getSubclass() {
      return this.subclass;
    }

    public issueCreditToken_args setSubclass(short subclass) {
      this.subclass = subclass;
      setSubclassIsSet(true);
      return this;
    }

    public void unsetSubclass() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
    }

    /** Returns true if field subclass is set (has been assigned a value) and false otherwise */
    public boolean isSetSubclass() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
    }

    public void setSubclassIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBCLASS_ISSET_ID, value);
    }

    public double getTransferAmount() {
      return this.transferAmount;
    }

    public issueCreditToken_args setTransferAmount(double transferAmount) {
      this.transferAmount = transferAmount;
      setTransferAmountIsSet(true);
      return this;
    }

    public void unsetTransferAmount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID);
    }

    /** Returns true if field transferAmount is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferAmount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID);
    }

    public void setTransferAmountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID, value);
    }

    public long getTokenTime() {
      return this.tokenTime;
    }

    public issueCreditToken_args setTokenTime(long tokenTime) {
      this.tokenTime = tokenTime;
      setTokenTimeIsSet(true);
      return this;
    }

    public void unsetTokenTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKENTIME_ISSET_ID);
    }

    /** Returns true if field tokenTime is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKENTIME_ISSET_ID);
    }

    public void setTokenTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKENTIME_ISSET_ID, value);
    }

    public long getFlags() {
      return this.flags;
    }

    public issueCreditToken_args setFlags(long flags) {
      this.flags = flags;
      setFlagsIsSet(true);
      return this;
    }

    public void unsetFlags() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
    }

    public void setFlagsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case METER_CONFIG:
        if (value == null) {
          unsetMeterConfig();
        } else {
          setMeterConfig((MeterConfigIn)value);
        }
        break;

      case SUBCLASS:
        if (value == null) {
          unsetSubclass();
        } else {
          setSubclass((java.lang.Short)value);
        }
        break;

      case TRANSFER_AMOUNT:
        if (value == null) {
          unsetTransferAmount();
        } else {
          setTransferAmount((java.lang.Double)value);
        }
        break;

      case TOKEN_TIME:
        if (value == null) {
          unsetTokenTime();
        } else {
          setTokenTime((java.lang.Long)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case METER_CONFIG:
        return getMeterConfig();

      case SUBCLASS:
        return getSubclass();

      case TRANSFER_AMOUNT:
        return getTransferAmount();

      case TOKEN_TIME:
        return getTokenTime();

      case FLAGS:
        return getFlags();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case METER_CONFIG:
        return isSetMeterConfig();
      case SUBCLASS:
        return isSetSubclass();
      case TRANSFER_AMOUNT:
        return isSetTransferAmount();
      case TOKEN_TIME:
        return isSetTokenTime();
      case FLAGS:
        return isSetFlags();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueCreditToken_args)
        return this.equals((issueCreditToken_args)that);
      return false;
    }

    public boolean equals(issueCreditToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_meterConfig = true && this.isSetMeterConfig();
      boolean that_present_meterConfig = true && that.isSetMeterConfig();
      if (this_present_meterConfig || that_present_meterConfig) {
        if (!(this_present_meterConfig && that_present_meterConfig))
          return false;
        if (!this.meterConfig.equals(that.meterConfig))
          return false;
      }

      boolean this_present_subclass = true;
      boolean that_present_subclass = true;
      if (this_present_subclass || that_present_subclass) {
        if (!(this_present_subclass && that_present_subclass))
          return false;
        if (this.subclass != that.subclass)
          return false;
      }

      boolean this_present_transferAmount = true;
      boolean that_present_transferAmount = true;
      if (this_present_transferAmount || that_present_transferAmount) {
        if (!(this_present_transferAmount && that_present_transferAmount))
          return false;
        if (this.transferAmount != that.transferAmount)
          return false;
      }

      boolean this_present_tokenTime = true;
      boolean that_present_tokenTime = true;
      if (this_present_tokenTime || that_present_tokenTime) {
        if (!(this_present_tokenTime && that_present_tokenTime))
          return false;
        if (this.tokenTime != that.tokenTime)
          return false;
      }

      boolean this_present_flags = true;
      boolean that_present_flags = true;
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (this.flags != that.flags)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetMeterConfig()) ? 131071 : 524287);
      if (isSetMeterConfig())
        hashCode = hashCode * 8191 + meterConfig.hashCode();

      hashCode = hashCode * 8191 + subclass;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transferAmount);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tokenTime);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(flags);

      return hashCode;
    }

    @Override
    public int compareTo(issueCreditToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMeterConfig()).compareTo(other.isSetMeterConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeterConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meterConfig, other.meterConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSubclass()).compareTo(other.isSetSubclass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubclass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subclass, other.subclass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTransferAmount()).compareTo(other.isSetTransferAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferAmount, other.transferAmount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenTime()).compareTo(other.isSetTokenTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenTime, other.tokenTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueCreditToken_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("meterConfig:");
      if (this.meterConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.meterConfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subclass:");
      sb.append(this.subclass);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferAmount:");
      sb.append(this.transferAmount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenTime:");
      sb.append(this.tokenTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (meterConfig == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meterConfig' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'subclass' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'transferAmount' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'tokenTime' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'flags' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (meterConfig != null) {
        meterConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueCreditToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueCreditToken_argsStandardScheme getScheme() {
        return new issueCreditToken_argsStandardScheme();
      }
    }

    private static class issueCreditToken_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueCreditToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueCreditToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METER_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.meterConfig = new MeterConfigIn();
                struct.meterConfig.read(iprot);
                struct.setMeterConfigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SUBCLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.subclass = iprot.readI16();
                struct.setSubclassIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TRANSFER_AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.transferAmount = iprot.readDouble();
                struct.setTransferAmountIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOKEN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tokenTime = iprot.readI64();
                struct.setTokenTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.flags = iprot.readI64();
                struct.setFlagsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSubclass()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'subclass' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetTransferAmount()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'transferAmount' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetTokenTime()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenTime' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetFlags()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'flags' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueCreditToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.meterConfig != null) {
          oprot.writeFieldBegin(METER_CONFIG_FIELD_DESC);
          struct.meterConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUBCLASS_FIELD_DESC);
        oprot.writeI16(struct.subclass);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TRANSFER_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.transferAmount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOKEN_TIME_FIELD_DESC);
        oprot.writeI64(struct.tokenTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        oprot.writeI64(struct.flags);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueCreditToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueCreditToken_argsTupleScheme getScheme() {
        return new issueCreditToken_argsTupleScheme();
      }
    }

    private static class issueCreditToken_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueCreditToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueCreditToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        struct.meterConfig.write(oprot);
        oprot.writeI16(struct.subclass);
        oprot.writeDouble(struct.transferAmount);
        oprot.writeI64(struct.tokenTime);
        oprot.writeI64(struct.flags);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueCreditToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.meterConfig = new MeterConfigIn();
        struct.meterConfig.read(iprot);
        struct.setMeterConfigIsSet(true);
        struct.subclass = iprot.readI16();
        struct.setSubclassIsSet(true);
        struct.transferAmount = iprot.readDouble();
        struct.setTransferAmountIsSet(true);
        struct.tokenTime = iprot.readI64();
        struct.setTokenTimeIsSet(true);
        struct.flags = iprot.readI64();
        struct.setFlagsIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueCreditToken_result implements org.apache.thrift.TBase<issueCreditToken_result, issueCreditToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueCreditToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueCreditToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueCreditToken_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueCreditToken_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Token> success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueCreditToken_result.class, metaDataMap);
    }

    public issueCreditToken_result() {
    }

    public issueCreditToken_result(
      java.util.List<Token> success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueCreditToken_result(issueCreditToken_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Token> __this__success = new java.util.ArrayList<Token>(other.success.size());
        for (Token other_element : other.success) {
          __this__success.add(new Token(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public issueCreditToken_result deepCopy() {
      return new issueCreditToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Token> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Token elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Token>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Token> getSuccess() {
      return this.success;
    }

    public issueCreditToken_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Token> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public issueCreditToken_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Token>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueCreditToken_result)
        return this.equals((issueCreditToken_result)that);
      return false;
    }

    public boolean equals(issueCreditToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueCreditToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueCreditToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueCreditToken_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueCreditToken_resultStandardScheme getScheme() {
        return new issueCreditToken_resultStandardScheme();
      }
    }

    private static class issueCreditToken_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueCreditToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueCreditToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Token>(_list26.size);
                  @org.apache.thrift.annotation.Nullable Token _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = new Token();
                    _elem27.read(iprot);
                    struct.success.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueCreditToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Token _iter29 : struct.success)
            {
              _iter29.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueCreditToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueCreditToken_resultTupleScheme getScheme() {
        return new issueCreditToken_resultTupleScheme();
      }
    }

    private static class issueCreditToken_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueCreditToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueCreditToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Token _iter30 : struct.success)
            {
              _iter30.write(oprot);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueCreditToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Token>(_list31.size);
            @org.apache.thrift.annotation.Nullable Token _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = new Token();
              _elem32.read(iprot);
              struct.success.add(_elem32);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueMeterTestToken_args implements org.apache.thrift.TBase<issueMeterTestToken_args, issueMeterTestToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueMeterTestToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueMeterTestToken_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("subclass", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("control", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField MFRCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mfrcode", org.apache.thrift.protocol.TType.I16, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueMeterTestToken_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueMeterTestToken_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public short subclass; // required
    public long control; // required
    public short mfrcode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      SUBCLASS((short)3, "subclass"),
      CONTROL((short)4, "control"),
      MFRCODE((short)5, "mfrcode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // SUBCLASS
            return SUBCLASS;
          case 4: // CONTROL
            return CONTROL;
          case 5: // MFRCODE
            return MFRCODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBCLASS_ISSET_ID = 0;
    private static final int __CONTROL_ISSET_ID = 1;
    private static final int __MFRCODE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("subclass", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.CONTROL, new org.apache.thrift.meta_data.FieldMetaData("control", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MFRCODE, new org.apache.thrift.meta_data.FieldMetaData("mfrcode", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueMeterTestToken_args.class, metaDataMap);
    }

    public issueMeterTestToken_args() {
    }

    public issueMeterTestToken_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      short subclass,
      long control,
      short mfrcode)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.subclass = subclass;
      setSubclassIsSet(true);
      this.control = control;
      setControlIsSet(true);
      this.mfrcode = mfrcode;
      setMfrcodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueMeterTestToken_args(issueMeterTestToken_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.subclass = other.subclass;
      this.control = other.control;
      this.mfrcode = other.mfrcode;
    }

    public issueMeterTestToken_args deepCopy() {
      return new issueMeterTestToken_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      setSubclassIsSet(false);
      this.subclass = 0;
      setControlIsSet(false);
      this.control = 0;
      setMfrcodeIsSet(false);
      this.mfrcode = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public issueMeterTestToken_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public issueMeterTestToken_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public short getSubclass() {
      return this.subclass;
    }

    public issueMeterTestToken_args setSubclass(short subclass) {
      this.subclass = subclass;
      setSubclassIsSet(true);
      return this;
    }

    public void unsetSubclass() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
    }

    /** Returns true if field subclass is set (has been assigned a value) and false otherwise */
    public boolean isSetSubclass() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
    }

    public void setSubclassIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBCLASS_ISSET_ID, value);
    }

    public long getControl() {
      return this.control;
    }

    public issueMeterTestToken_args setControl(long control) {
      this.control = control;
      setControlIsSet(true);
      return this;
    }

    public void unsetControl() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONTROL_ISSET_ID);
    }

    /** Returns true if field control is set (has been assigned a value) and false otherwise */
    public boolean isSetControl() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONTROL_ISSET_ID);
    }

    public void setControlIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONTROL_ISSET_ID, value);
    }

    public short getMfrcode() {
      return this.mfrcode;
    }

    public issueMeterTestToken_args setMfrcode(short mfrcode) {
      this.mfrcode = mfrcode;
      setMfrcodeIsSet(true);
      return this;
    }

    public void unsetMfrcode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MFRCODE_ISSET_ID);
    }

    /** Returns true if field mfrcode is set (has been assigned a value) and false otherwise */
    public boolean isSetMfrcode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MFRCODE_ISSET_ID);
    }

    public void setMfrcodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MFRCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case SUBCLASS:
        if (value == null) {
          unsetSubclass();
        } else {
          setSubclass((java.lang.Short)value);
        }
        break;

      case CONTROL:
        if (value == null) {
          unsetControl();
        } else {
          setControl((java.lang.Long)value);
        }
        break;

      case MFRCODE:
        if (value == null) {
          unsetMfrcode();
        } else {
          setMfrcode((java.lang.Short)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case SUBCLASS:
        return getSubclass();

      case CONTROL:
        return getControl();

      case MFRCODE:
        return getMfrcode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case SUBCLASS:
        return isSetSubclass();
      case CONTROL:
        return isSetControl();
      case MFRCODE:
        return isSetMfrcode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueMeterTestToken_args)
        return this.equals((issueMeterTestToken_args)that);
      return false;
    }

    public boolean equals(issueMeterTestToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_subclass = true;
      boolean that_present_subclass = true;
      if (this_present_subclass || that_present_subclass) {
        if (!(this_present_subclass && that_present_subclass))
          return false;
        if (this.subclass != that.subclass)
          return false;
      }

      boolean this_present_control = true;
      boolean that_present_control = true;
      if (this_present_control || that_present_control) {
        if (!(this_present_control && that_present_control))
          return false;
        if (this.control != that.control)
          return false;
      }

      boolean this_present_mfrcode = true;
      boolean that_present_mfrcode = true;
      if (this_present_mfrcode || that_present_mfrcode) {
        if (!(this_present_mfrcode && that_present_mfrcode))
          return false;
        if (this.mfrcode != that.mfrcode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + subclass;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(control);

      hashCode = hashCode * 8191 + mfrcode;

      return hashCode;
    }

    @Override
    public int compareTo(issueMeterTestToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSubclass()).compareTo(other.isSetSubclass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubclass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subclass, other.subclass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetControl()).compareTo(other.isSetControl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetControl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control, other.control);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMfrcode()).compareTo(other.isSetMfrcode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMfrcode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mfrcode, other.mfrcode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueMeterTestToken_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subclass:");
      sb.append(this.subclass);
      first = false;
      if (!first) sb.append(", ");
      sb.append("control:");
      sb.append(this.control);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mfrcode:");
      sb.append(this.mfrcode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'subclass' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'control' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'mfrcode' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueMeterTestToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMeterTestToken_argsStandardScheme getScheme() {
        return new issueMeterTestToken_argsStandardScheme();
      }
    }

    private static class issueMeterTestToken_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueMeterTestToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueMeterTestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SUBCLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.subclass = iprot.readI16();
                struct.setSubclassIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTROL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.control = iprot.readI64();
                struct.setControlIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MFRCODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.mfrcode = iprot.readI16();
                struct.setMfrcodeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSubclass()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'subclass' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetControl()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'control' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetMfrcode()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'mfrcode' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueMeterTestToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUBCLASS_FIELD_DESC);
        oprot.writeI16(struct.subclass);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONTROL_FIELD_DESC);
        oprot.writeI64(struct.control);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MFRCODE_FIELD_DESC);
        oprot.writeI16(struct.mfrcode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueMeterTestToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMeterTestToken_argsTupleScheme getScheme() {
        return new issueMeterTestToken_argsTupleScheme();
      }
    }

    private static class issueMeterTestToken_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueMeterTestToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueMeterTestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        oprot.writeI16(struct.subclass);
        oprot.writeI64(struct.control);
        oprot.writeI16(struct.mfrcode);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueMeterTestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.subclass = iprot.readI16();
        struct.setSubclassIsSet(true);
        struct.control = iprot.readI64();
        struct.setControlIsSet(true);
        struct.mfrcode = iprot.readI16();
        struct.setMfrcodeIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueMeterTestToken_result implements org.apache.thrift.TBase<issueMeterTestToken_result, issueMeterTestToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueMeterTestToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueMeterTestToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueMeterTestToken_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueMeterTestToken_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MeterTestToken success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterTestToken.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueMeterTestToken_result.class, metaDataMap);
    }

    public issueMeterTestToken_result() {
    }

    public issueMeterTestToken_result(
      MeterTestToken success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueMeterTestToken_result(issueMeterTestToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new MeterTestToken(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public issueMeterTestToken_result deepCopy() {
      return new issueMeterTestToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MeterTestToken getSuccess() {
      return this.success;
    }

    public issueMeterTestToken_result setSuccess(@org.apache.thrift.annotation.Nullable MeterTestToken success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public issueMeterTestToken_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MeterTestToken)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueMeterTestToken_result)
        return this.equals((issueMeterTestToken_result)that);
      return false;
    }

    public boolean equals(issueMeterTestToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueMeterTestToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueMeterTestToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueMeterTestToken_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMeterTestToken_resultStandardScheme getScheme() {
        return new issueMeterTestToken_resultStandardScheme();
      }
    }

    private static class issueMeterTestToken_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueMeterTestToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueMeterTestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MeterTestToken();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueMeterTestToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueMeterTestToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMeterTestToken_resultTupleScheme getScheme() {
        return new issueMeterTestToken_resultTupleScheme();
      }
    }

    private static class issueMeterTestToken_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueMeterTestToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueMeterTestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueMeterTestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MeterTestToken();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueMseToken_args implements org.apache.thrift.TBase<issueMseToken_args, issueMseToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueMseToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueMseToken_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METER_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("meterConfig", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("subclass", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField TRANSFER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transferAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField TOKEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenTime", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueMseToken_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueMseToken_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig; // required
    public short subclass; // required
    public double transferAmount; // required
    public long tokenTime; // required
    public long flags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      METER_CONFIG((short)3, "meterConfig"),
      SUBCLASS((short)4, "subclass"),
      TRANSFER_AMOUNT((short)5, "transferAmount"),
      TOKEN_TIME((short)6, "tokenTime"),
      FLAGS((short)7, "flags");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // METER_CONFIG
            return METER_CONFIG;
          case 4: // SUBCLASS
            return SUBCLASS;
          case 5: // TRANSFER_AMOUNT
            return TRANSFER_AMOUNT;
          case 6: // TOKEN_TIME
            return TOKEN_TIME;
          case 7: // FLAGS
            return FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBCLASS_ISSET_ID = 0;
    private static final int __TRANSFERAMOUNT_ISSET_ID = 1;
    private static final int __TOKENTIME_ISSET_ID = 2;
    private static final int __FLAGS_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METER_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("meterConfig", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigIn.class)));
      tmpMap.put(_Fields.SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("subclass", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.TRANSFER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transferAmount", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.TOKEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("tokenTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueMseToken_args.class, metaDataMap);
    }

    public issueMseToken_args() {
    }

    public issueMseToken_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      MeterConfigIn meterConfig,
      short subclass,
      double transferAmount,
      long tokenTime,
      long flags)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.meterConfig = meterConfig;
      this.subclass = subclass;
      setSubclassIsSet(true);
      this.transferAmount = transferAmount;
      setTransferAmountIsSet(true);
      this.tokenTime = tokenTime;
      setTokenTimeIsSet(true);
      this.flags = flags;
      setFlagsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueMseToken_args(issueMseToken_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetMeterConfig()) {
        this.meterConfig = new MeterConfigIn(other.meterConfig);
      }
      this.subclass = other.subclass;
      this.transferAmount = other.transferAmount;
      this.tokenTime = other.tokenTime;
      this.flags = other.flags;
    }

    public issueMseToken_args deepCopy() {
      return new issueMseToken_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.meterConfig = null;
      setSubclassIsSet(false);
      this.subclass = 0;
      setTransferAmountIsSet(false);
      this.transferAmount = 0.0;
      setTokenTimeIsSet(false);
      this.tokenTime = 0;
      setFlagsIsSet(false);
      this.flags = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public issueMseToken_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public issueMseToken_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MeterConfigIn getMeterConfig() {
      return this.meterConfig;
    }

    public issueMseToken_args setMeterConfig(@org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig) {
      this.meterConfig = meterConfig;
      return this;
    }

    public void unsetMeterConfig() {
      this.meterConfig = null;
    }

    /** Returns true if field meterConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetMeterConfig() {
      return this.meterConfig != null;
    }

    public void setMeterConfigIsSet(boolean value) {
      if (!value) {
        this.meterConfig = null;
      }
    }

    public short getSubclass() {
      return this.subclass;
    }

    public issueMseToken_args setSubclass(short subclass) {
      this.subclass = subclass;
      setSubclassIsSet(true);
      return this;
    }

    public void unsetSubclass() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
    }

    /** Returns true if field subclass is set (has been assigned a value) and false otherwise */
    public boolean isSetSubclass() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
    }

    public void setSubclassIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBCLASS_ISSET_ID, value);
    }

    public double getTransferAmount() {
      return this.transferAmount;
    }

    public issueMseToken_args setTransferAmount(double transferAmount) {
      this.transferAmount = transferAmount;
      setTransferAmountIsSet(true);
      return this;
    }

    public void unsetTransferAmount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID);
    }

    /** Returns true if field transferAmount is set (has been assigned a value) and false otherwise */
    public boolean isSetTransferAmount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID);
    }

    public void setTransferAmountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFERAMOUNT_ISSET_ID, value);
    }

    public long getTokenTime() {
      return this.tokenTime;
    }

    public issueMseToken_args setTokenTime(long tokenTime) {
      this.tokenTime = tokenTime;
      setTokenTimeIsSet(true);
      return this;
    }

    public void unsetTokenTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKENTIME_ISSET_ID);
    }

    /** Returns true if field tokenTime is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKENTIME_ISSET_ID);
    }

    public void setTokenTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKENTIME_ISSET_ID, value);
    }

    public long getFlags() {
      return this.flags;
    }

    public issueMseToken_args setFlags(long flags) {
      this.flags = flags;
      setFlagsIsSet(true);
      return this;
    }

    public void unsetFlags() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
    }

    public void setFlagsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case METER_CONFIG:
        if (value == null) {
          unsetMeterConfig();
        } else {
          setMeterConfig((MeterConfigIn)value);
        }
        break;

      case SUBCLASS:
        if (value == null) {
          unsetSubclass();
        } else {
          setSubclass((java.lang.Short)value);
        }
        break;

      case TRANSFER_AMOUNT:
        if (value == null) {
          unsetTransferAmount();
        } else {
          setTransferAmount((java.lang.Double)value);
        }
        break;

      case TOKEN_TIME:
        if (value == null) {
          unsetTokenTime();
        } else {
          setTokenTime((java.lang.Long)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case METER_CONFIG:
        return getMeterConfig();

      case SUBCLASS:
        return getSubclass();

      case TRANSFER_AMOUNT:
        return getTransferAmount();

      case TOKEN_TIME:
        return getTokenTime();

      case FLAGS:
        return getFlags();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case METER_CONFIG:
        return isSetMeterConfig();
      case SUBCLASS:
        return isSetSubclass();
      case TRANSFER_AMOUNT:
        return isSetTransferAmount();
      case TOKEN_TIME:
        return isSetTokenTime();
      case FLAGS:
        return isSetFlags();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueMseToken_args)
        return this.equals((issueMseToken_args)that);
      return false;
    }

    public boolean equals(issueMseToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_meterConfig = true && this.isSetMeterConfig();
      boolean that_present_meterConfig = true && that.isSetMeterConfig();
      if (this_present_meterConfig || that_present_meterConfig) {
        if (!(this_present_meterConfig && that_present_meterConfig))
          return false;
        if (!this.meterConfig.equals(that.meterConfig))
          return false;
      }

      boolean this_present_subclass = true;
      boolean that_present_subclass = true;
      if (this_present_subclass || that_present_subclass) {
        if (!(this_present_subclass && that_present_subclass))
          return false;
        if (this.subclass != that.subclass)
          return false;
      }

      boolean this_present_transferAmount = true;
      boolean that_present_transferAmount = true;
      if (this_present_transferAmount || that_present_transferAmount) {
        if (!(this_present_transferAmount && that_present_transferAmount))
          return false;
        if (this.transferAmount != that.transferAmount)
          return false;
      }

      boolean this_present_tokenTime = true;
      boolean that_present_tokenTime = true;
      if (this_present_tokenTime || that_present_tokenTime) {
        if (!(this_present_tokenTime && that_present_tokenTime))
          return false;
        if (this.tokenTime != that.tokenTime)
          return false;
      }

      boolean this_present_flags = true;
      boolean that_present_flags = true;
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (this.flags != that.flags)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetMeterConfig()) ? 131071 : 524287);
      if (isSetMeterConfig())
        hashCode = hashCode * 8191 + meterConfig.hashCode();

      hashCode = hashCode * 8191 + subclass;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transferAmount);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tokenTime);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(flags);

      return hashCode;
    }

    @Override
    public int compareTo(issueMseToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMeterConfig()).compareTo(other.isSetMeterConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeterConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meterConfig, other.meterConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSubclass()).compareTo(other.isSetSubclass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubclass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subclass, other.subclass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTransferAmount()).compareTo(other.isSetTransferAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransferAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transferAmount, other.transferAmount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenTime()).compareTo(other.isSetTokenTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenTime, other.tokenTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueMseToken_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("meterConfig:");
      if (this.meterConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.meterConfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subclass:");
      sb.append(this.subclass);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transferAmount:");
      sb.append(this.transferAmount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenTime:");
      sb.append(this.tokenTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (meterConfig == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meterConfig' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'subclass' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'transferAmount' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'tokenTime' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'flags' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (meterConfig != null) {
        meterConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueMseToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMseToken_argsStandardScheme getScheme() {
        return new issueMseToken_argsStandardScheme();
      }
    }

    private static class issueMseToken_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueMseToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueMseToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METER_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.meterConfig = new MeterConfigIn();
                struct.meterConfig.read(iprot);
                struct.setMeterConfigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SUBCLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.subclass = iprot.readI16();
                struct.setSubclassIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TRANSFER_AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.transferAmount = iprot.readDouble();
                struct.setTransferAmountIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOKEN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tokenTime = iprot.readI64();
                struct.setTokenTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FLAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.flags = iprot.readI64();
                struct.setFlagsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSubclass()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'subclass' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetTransferAmount()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'transferAmount' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetTokenTime()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenTime' was not found in serialized data! Struct: " + toString());
        }
        if (!struct.isSetFlags()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'flags' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueMseToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.meterConfig != null) {
          oprot.writeFieldBegin(METER_CONFIG_FIELD_DESC);
          struct.meterConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUBCLASS_FIELD_DESC);
        oprot.writeI16(struct.subclass);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TRANSFER_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.transferAmount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOKEN_TIME_FIELD_DESC);
        oprot.writeI64(struct.tokenTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        oprot.writeI64(struct.flags);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueMseToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMseToken_argsTupleScheme getScheme() {
        return new issueMseToken_argsTupleScheme();
      }
    }

    private static class issueMseToken_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueMseToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueMseToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        struct.meterConfig.write(oprot);
        oprot.writeI16(struct.subclass);
        oprot.writeDouble(struct.transferAmount);
        oprot.writeI64(struct.tokenTime);
        oprot.writeI64(struct.flags);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueMseToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.meterConfig = new MeterConfigIn();
        struct.meterConfig.read(iprot);
        struct.setMeterConfigIsSet(true);
        struct.subclass = iprot.readI16();
        struct.setSubclassIsSet(true);
        struct.transferAmount = iprot.readDouble();
        struct.setTransferAmountIsSet(true);
        struct.tokenTime = iprot.readI64();
        struct.setTokenTimeIsSet(true);
        struct.flags = iprot.readI64();
        struct.setFlagsIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueMseToken_result implements org.apache.thrift.TBase<issueMseToken_result, issueMseToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueMseToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueMseToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueMseToken_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueMseToken_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Token> success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueMseToken_result.class, metaDataMap);
    }

    public issueMseToken_result() {
    }

    public issueMseToken_result(
      java.util.List<Token> success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueMseToken_result(issueMseToken_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Token> __this__success = new java.util.ArrayList<Token>(other.success.size());
        for (Token other_element : other.success) {
          __this__success.add(new Token(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public issueMseToken_result deepCopy() {
      return new issueMseToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Token> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Token elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Token>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Token> getSuccess() {
      return this.success;
    }

    public issueMseToken_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Token> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public issueMseToken_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Token>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueMseToken_result)
        return this.equals((issueMseToken_result)that);
      return false;
    }

    public boolean equals(issueMseToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueMseToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueMseToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueMseToken_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMseToken_resultStandardScheme getScheme() {
        return new issueMseToken_resultStandardScheme();
      }
    }

    private static class issueMseToken_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueMseToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueMseToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Token>(_list34.size);
                  @org.apache.thrift.annotation.Nullable Token _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = new Token();
                    _elem35.read(iprot);
                    struct.success.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueMseToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Token _iter37 : struct.success)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueMseToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueMseToken_resultTupleScheme getScheme() {
        return new issueMseToken_resultTupleScheme();
      }
    }

    private static class issueMseToken_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueMseToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueMseToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Token _iter38 : struct.success)
            {
              _iter38.write(oprot);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueMseToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Token>(_list39.size);
            @org.apache.thrift.annotation.Nullable Token _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = new Token();
              _elem40.read(iprot);
              struct.success.add(_elem40);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueKeyChangeTokens_args implements org.apache.thrift.TBase<issueKeyChangeTokens_args, issueKeyChangeTokens_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueKeyChangeTokens_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueKeyChangeTokens_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METER_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("meterConfig", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField NEW_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("newConfig", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueKeyChangeTokens_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueKeyChangeTokens_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig; // required
    public @org.apache.thrift.annotation.Nullable MeterConfigAmendment newConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      METER_CONFIG((short)3, "meterConfig"),
      NEW_CONFIG((short)4, "newConfig");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // METER_CONFIG
            return METER_CONFIG;
          case 4: // NEW_CONFIG
            return NEW_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METER_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("meterConfig", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigIn.class)));
      tmpMap.put(_Fields.NEW_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("newConfig", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigAmendment.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueKeyChangeTokens_args.class, metaDataMap);
    }

    public issueKeyChangeTokens_args() {
    }

    public issueKeyChangeTokens_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      MeterConfigIn meterConfig,
      MeterConfigAmendment newConfig)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.meterConfig = meterConfig;
      this.newConfig = newConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueKeyChangeTokens_args(issueKeyChangeTokens_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetMeterConfig()) {
        this.meterConfig = new MeterConfigIn(other.meterConfig);
      }
      if (other.isSetNewConfig()) {
        this.newConfig = new MeterConfigAmendment(other.newConfig);
      }
    }

    public issueKeyChangeTokens_args deepCopy() {
      return new issueKeyChangeTokens_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.meterConfig = null;
      this.newConfig = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public issueKeyChangeTokens_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public issueKeyChangeTokens_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MeterConfigIn getMeterConfig() {
      return this.meterConfig;
    }

    public issueKeyChangeTokens_args setMeterConfig(@org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig) {
      this.meterConfig = meterConfig;
      return this;
    }

    public void unsetMeterConfig() {
      this.meterConfig = null;
    }

    /** Returns true if field meterConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetMeterConfig() {
      return this.meterConfig != null;
    }

    public void setMeterConfigIsSet(boolean value) {
      if (!value) {
        this.meterConfig = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MeterConfigAmendment getNewConfig() {
      return this.newConfig;
    }

    public issueKeyChangeTokens_args setNewConfig(@org.apache.thrift.annotation.Nullable MeterConfigAmendment newConfig) {
      this.newConfig = newConfig;
      return this;
    }

    public void unsetNewConfig() {
      this.newConfig = null;
    }

    /** Returns true if field newConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetNewConfig() {
      return this.newConfig != null;
    }

    public void setNewConfigIsSet(boolean value) {
      if (!value) {
        this.newConfig = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case METER_CONFIG:
        if (value == null) {
          unsetMeterConfig();
        } else {
          setMeterConfig((MeterConfigIn)value);
        }
        break;

      case NEW_CONFIG:
        if (value == null) {
          unsetNewConfig();
        } else {
          setNewConfig((MeterConfigAmendment)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case METER_CONFIG:
        return getMeterConfig();

      case NEW_CONFIG:
        return getNewConfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case METER_CONFIG:
        return isSetMeterConfig();
      case NEW_CONFIG:
        return isSetNewConfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueKeyChangeTokens_args)
        return this.equals((issueKeyChangeTokens_args)that);
      return false;
    }

    public boolean equals(issueKeyChangeTokens_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_meterConfig = true && this.isSetMeterConfig();
      boolean that_present_meterConfig = true && that.isSetMeterConfig();
      if (this_present_meterConfig || that_present_meterConfig) {
        if (!(this_present_meterConfig && that_present_meterConfig))
          return false;
        if (!this.meterConfig.equals(that.meterConfig))
          return false;
      }

      boolean this_present_newConfig = true && this.isSetNewConfig();
      boolean that_present_newConfig = true && that.isSetNewConfig();
      if (this_present_newConfig || that_present_newConfig) {
        if (!(this_present_newConfig && that_present_newConfig))
          return false;
        if (!this.newConfig.equals(that.newConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetMeterConfig()) ? 131071 : 524287);
      if (isSetMeterConfig())
        hashCode = hashCode * 8191 + meterConfig.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewConfig()) ? 131071 : 524287);
      if (isSetNewConfig())
        hashCode = hashCode * 8191 + newConfig.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueKeyChangeTokens_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMeterConfig()).compareTo(other.isSetMeterConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeterConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meterConfig, other.meterConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewConfig()).compareTo(other.isSetNewConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newConfig, other.newConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueKeyChangeTokens_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("meterConfig:");
      if (this.meterConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.meterConfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newConfig:");
      if (this.newConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.newConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (meterConfig == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meterConfig' was not present! Struct: " + toString());
      }
      if (newConfig == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'newConfig' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (meterConfig != null) {
        meterConfig.validate();
      }
      if (newConfig != null) {
        newConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueKeyChangeTokens_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueKeyChangeTokens_argsStandardScheme getScheme() {
        return new issueKeyChangeTokens_argsStandardScheme();
      }
    }

    private static class issueKeyChangeTokens_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueKeyChangeTokens_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueKeyChangeTokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METER_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.meterConfig = new MeterConfigIn();
                struct.meterConfig.read(iprot);
                struct.setMeterConfigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NEW_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newConfig = new MeterConfigAmendment();
                struct.newConfig.read(iprot);
                struct.setNewConfigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueKeyChangeTokens_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.meterConfig != null) {
          oprot.writeFieldBegin(METER_CONFIG_FIELD_DESC);
          struct.meterConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newConfig != null) {
          oprot.writeFieldBegin(NEW_CONFIG_FIELD_DESC);
          struct.newConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueKeyChangeTokens_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueKeyChangeTokens_argsTupleScheme getScheme() {
        return new issueKeyChangeTokens_argsTupleScheme();
      }
    }

    private static class issueKeyChangeTokens_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueKeyChangeTokens_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueKeyChangeTokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        struct.meterConfig.write(oprot);
        struct.newConfig.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueKeyChangeTokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.meterConfig = new MeterConfigIn();
        struct.meterConfig.read(iprot);
        struct.setMeterConfigIsSet(true);
        struct.newConfig = new MeterConfigAmendment();
        struct.newConfig.read(iprot);
        struct.setNewConfigIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueKeyChangeTokens_result implements org.apache.thrift.TBase<issueKeyChangeTokens_result, issueKeyChangeTokens_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueKeyChangeTokens_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueKeyChangeTokens_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueKeyChangeTokens_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueKeyChangeTokens_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Token> success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueKeyChangeTokens_result.class, metaDataMap);
    }

    public issueKeyChangeTokens_result() {
    }

    public issueKeyChangeTokens_result(
      java.util.List<Token> success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueKeyChangeTokens_result(issueKeyChangeTokens_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Token> __this__success = new java.util.ArrayList<Token>(other.success.size());
        for (Token other_element : other.success) {
          __this__success.add(new Token(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public issueKeyChangeTokens_result deepCopy() {
      return new issueKeyChangeTokens_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Token> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Token elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Token>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Token> getSuccess() {
      return this.success;
    }

    public issueKeyChangeTokens_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Token> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public issueKeyChangeTokens_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Token>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueKeyChangeTokens_result)
        return this.equals((issueKeyChangeTokens_result)that);
      return false;
    }

    public boolean equals(issueKeyChangeTokens_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueKeyChangeTokens_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueKeyChangeTokens_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueKeyChangeTokens_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueKeyChangeTokens_resultStandardScheme getScheme() {
        return new issueKeyChangeTokens_resultStandardScheme();
      }
    }

    private static class issueKeyChangeTokens_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueKeyChangeTokens_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueKeyChangeTokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Token>(_list42.size);
                  @org.apache.thrift.annotation.Nullable Token _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = new Token();
                    _elem43.read(iprot);
                    struct.success.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueKeyChangeTokens_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Token _iter45 : struct.success)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueKeyChangeTokens_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueKeyChangeTokens_resultTupleScheme getScheme() {
        return new issueKeyChangeTokens_resultTupleScheme();
      }
    }

    private static class issueKeyChangeTokens_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueKeyChangeTokens_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueKeyChangeTokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Token _iter46 : struct.success)
            {
              _iter46.write(oprot);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueKeyChangeTokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Token>(_list47.size);
            @org.apache.thrift.annotation.Nullable Token _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = new Token();
              _elem48.read(iprot);
              struct.success.add(_elem48);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class verifyToken_args implements org.apache.thrift.TBase<verifyToken_args, verifyToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyToken_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METER_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("meterConfig", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_DEC_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenDec", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyToken_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyToken_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tokenDec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      METER_CONFIG((short)3, "meterConfig"),
      TOKEN_DEC((short)4, "tokenDec");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // METER_CONFIG
            return METER_CONFIG;
          case 4: // TOKEN_DEC
            return TOKEN_DEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METER_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("meterConfig", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigIn.class)));
      tmpMap.put(_Fields.TOKEN_DEC, new org.apache.thrift.meta_data.FieldMetaData("tokenDec", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyToken_args.class, metaDataMap);
    }

    public verifyToken_args() {
    }

    public verifyToken_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      MeterConfigIn meterConfig,
      java.lang.String tokenDec)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.meterConfig = meterConfig;
      this.tokenDec = tokenDec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyToken_args(verifyToken_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetMeterConfig()) {
        this.meterConfig = new MeterConfigIn(other.meterConfig);
      }
      if (other.isSetTokenDec()) {
        this.tokenDec = other.tokenDec;
      }
    }

    public verifyToken_args deepCopy() {
      return new verifyToken_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.meterConfig = null;
      this.tokenDec = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public verifyToken_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public verifyToken_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MeterConfigIn getMeterConfig() {
      return this.meterConfig;
    }

    public verifyToken_args setMeterConfig(@org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig) {
      this.meterConfig = meterConfig;
      return this;
    }

    public void unsetMeterConfig() {
      this.meterConfig = null;
    }

    /** Returns true if field meterConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetMeterConfig() {
      return this.meterConfig != null;
    }

    public void setMeterConfigIsSet(boolean value) {
      if (!value) {
        this.meterConfig = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTokenDec() {
      return this.tokenDec;
    }

    public verifyToken_args setTokenDec(@org.apache.thrift.annotation.Nullable java.lang.String tokenDec) {
      this.tokenDec = tokenDec;
      return this;
    }

    public void unsetTokenDec() {
      this.tokenDec = null;
    }

    /** Returns true if field tokenDec is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenDec() {
      return this.tokenDec != null;
    }

    public void setTokenDecIsSet(boolean value) {
      if (!value) {
        this.tokenDec = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case METER_CONFIG:
        if (value == null) {
          unsetMeterConfig();
        } else {
          setMeterConfig((MeterConfigIn)value);
        }
        break;

      case TOKEN_DEC:
        if (value == null) {
          unsetTokenDec();
        } else {
          setTokenDec((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case METER_CONFIG:
        return getMeterConfig();

      case TOKEN_DEC:
        return getTokenDec();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case METER_CONFIG:
        return isSetMeterConfig();
      case TOKEN_DEC:
        return isSetTokenDec();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyToken_args)
        return this.equals((verifyToken_args)that);
      return false;
    }

    public boolean equals(verifyToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_meterConfig = true && this.isSetMeterConfig();
      boolean that_present_meterConfig = true && that.isSetMeterConfig();
      if (this_present_meterConfig || that_present_meterConfig) {
        if (!(this_present_meterConfig && that_present_meterConfig))
          return false;
        if (!this.meterConfig.equals(that.meterConfig))
          return false;
      }

      boolean this_present_tokenDec = true && this.isSetTokenDec();
      boolean that_present_tokenDec = true && that.isSetTokenDec();
      if (this_present_tokenDec || that_present_tokenDec) {
        if (!(this_present_tokenDec && that_present_tokenDec))
          return false;
        if (!this.tokenDec.equals(that.tokenDec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetMeterConfig()) ? 131071 : 524287);
      if (isSetMeterConfig())
        hashCode = hashCode * 8191 + meterConfig.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenDec()) ? 131071 : 524287);
      if (isSetTokenDec())
        hashCode = hashCode * 8191 + tokenDec.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verifyToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMeterConfig()).compareTo(other.isSetMeterConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeterConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meterConfig, other.meterConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenDec()).compareTo(other.isSetTokenDec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenDec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenDec, other.tokenDec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyToken_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("meterConfig:");
      if (this.meterConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.meterConfig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenDec:");
      if (this.tokenDec == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenDec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (meterConfig == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meterConfig' was not present! Struct: " + toString());
      }
      if (tokenDec == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenDec' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (meterConfig != null) {
        meterConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyToken_argsStandardScheme getScheme() {
        return new verifyToken_argsStandardScheme();
      }
    }

    private static class verifyToken_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METER_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.meterConfig = new MeterConfigIn();
                struct.meterConfig.read(iprot);
                struct.setMeterConfigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN_DEC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tokenDec = iprot.readString();
                struct.setTokenDecIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.meterConfig != null) {
          oprot.writeFieldBegin(METER_CONFIG_FIELD_DESC);
          struct.meterConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenDec != null) {
          oprot.writeFieldBegin(TOKEN_DEC_FIELD_DESC);
          oprot.writeString(struct.tokenDec);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyToken_argsTupleScheme getScheme() {
        return new verifyToken_argsTupleScheme();
      }
    }

    private static class verifyToken_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        struct.meterConfig.write(oprot);
        oprot.writeString(struct.tokenDec);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.meterConfig = new MeterConfigIn();
        struct.meterConfig.read(iprot);
        struct.setMeterConfigIsSet(true);
        struct.tokenDec = iprot.readString();
        struct.setTokenDecIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class verifyToken_result implements org.apache.thrift.TBase<verifyToken_result, verifyToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyToken_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyToken_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable VerifyResult success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VerifyResult.class)));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyToken_result.class, metaDataMap);
    }

    public verifyToken_result() {
    }

    public verifyToken_result(
      VerifyResult success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyToken_result(verifyToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new VerifyResult(other.success);
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public verifyToken_result deepCopy() {
      return new verifyToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public VerifyResult getSuccess() {
      return this.success;
    }

    public verifyToken_result setSuccess(@org.apache.thrift.annotation.Nullable VerifyResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public verifyToken_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((VerifyResult)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyToken_result)
        return this.equals((verifyToken_result)that);
      return false;
    }

    public boolean equals(verifyToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verifyToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyToken_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyToken_resultStandardScheme getScheme() {
        return new verifyToken_resultStandardScheme();
      }
    }

    private static class verifyToken_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new VerifyResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyToken_resultTupleScheme getScheme() {
        return new verifyToken_resultTupleScheme();
      }
    }

    private static class verifyToken_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new VerifyResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueDitkChangeTokens_args implements org.apache.thrift.TBase<issueDitkChangeTokens_args, issueDitkChangeTokens_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueDitkChangeTokens_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueDitkChangeTokens_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METER_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("meterConfig", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueDitkChangeTokens_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueDitkChangeTokens_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      METER_CONFIG((short)3, "meterConfig");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // METER_CONFIG
            return METER_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METER_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("meterConfig", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigIn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueDitkChangeTokens_args.class, metaDataMap);
    }

    public issueDitkChangeTokens_args() {
    }

    public issueDitkChangeTokens_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      MeterConfigIn meterConfig)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.meterConfig = meterConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueDitkChangeTokens_args(issueDitkChangeTokens_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetMeterConfig()) {
        this.meterConfig = new MeterConfigIn(other.meterConfig);
      }
    }

    public issueDitkChangeTokens_args deepCopy() {
      return new issueDitkChangeTokens_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.meterConfig = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public issueDitkChangeTokens_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public issueDitkChangeTokens_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public MeterConfigIn getMeterConfig() {
      return this.meterConfig;
    }

    public issueDitkChangeTokens_args setMeterConfig(@org.apache.thrift.annotation.Nullable MeterConfigIn meterConfig) {
      this.meterConfig = meterConfig;
      return this;
    }

    public void unsetMeterConfig() {
      this.meterConfig = null;
    }

    /** Returns true if field meterConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetMeterConfig() {
      return this.meterConfig != null;
    }

    public void setMeterConfigIsSet(boolean value) {
      if (!value) {
        this.meterConfig = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case METER_CONFIG:
        if (value == null) {
          unsetMeterConfig();
        } else {
          setMeterConfig((MeterConfigIn)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case METER_CONFIG:
        return getMeterConfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case METER_CONFIG:
        return isSetMeterConfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueDitkChangeTokens_args)
        return this.equals((issueDitkChangeTokens_args)that);
      return false;
    }

    public boolean equals(issueDitkChangeTokens_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_meterConfig = true && this.isSetMeterConfig();
      boolean that_present_meterConfig = true && that.isSetMeterConfig();
      if (this_present_meterConfig || that_present_meterConfig) {
        if (!(this_present_meterConfig && that_present_meterConfig))
          return false;
        if (!this.meterConfig.equals(that.meterConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetMeterConfig()) ? 131071 : 524287);
      if (isSetMeterConfig())
        hashCode = hashCode * 8191 + meterConfig.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueDitkChangeTokens_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMeterConfig()).compareTo(other.isSetMeterConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeterConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meterConfig, other.meterConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueDitkChangeTokens_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("meterConfig:");
      if (this.meterConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.meterConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (meterConfig == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'meterConfig' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (meterConfig != null) {
        meterConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueDitkChangeTokens_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueDitkChangeTokens_argsStandardScheme getScheme() {
        return new issueDitkChangeTokens_argsStandardScheme();
      }
    }

    private static class issueDitkChangeTokens_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueDitkChangeTokens_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueDitkChangeTokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METER_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.meterConfig = new MeterConfigIn();
                struct.meterConfig.read(iprot);
                struct.setMeterConfigIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueDitkChangeTokens_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.meterConfig != null) {
          oprot.writeFieldBegin(METER_CONFIG_FIELD_DESC);
          struct.meterConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueDitkChangeTokens_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueDitkChangeTokens_argsTupleScheme getScheme() {
        return new issueDitkChangeTokens_argsTupleScheme();
      }
    }

    private static class issueDitkChangeTokens_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueDitkChangeTokens_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueDitkChangeTokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        struct.meterConfig.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueDitkChangeTokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.meterConfig = new MeterConfigIn();
        struct.meterConfig.read(iprot);
        struct.setMeterConfigIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueDitkChangeTokens_result implements org.apache.thrift.TBase<issueDitkChangeTokens_result, issueDitkChangeTokens_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueDitkChangeTokens_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueDitkChangeTokens_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueDitkChangeTokens_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueDitkChangeTokens_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Token> success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueDitkChangeTokens_result.class, metaDataMap);
    }

    public issueDitkChangeTokens_result() {
    }

    public issueDitkChangeTokens_result(
      java.util.List<Token> success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueDitkChangeTokens_result(issueDitkChangeTokens_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Token> __this__success = new java.util.ArrayList<Token>(other.success.size());
        for (Token other_element : other.success) {
          __this__success.add(new Token(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public issueDitkChangeTokens_result deepCopy() {
      return new issueDitkChangeTokens_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Token> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Token elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Token>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Token> getSuccess() {
      return this.success;
    }

    public issueDitkChangeTokens_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Token> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public issueDitkChangeTokens_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Token>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof issueDitkChangeTokens_result)
        return this.equals((issueDitkChangeTokens_result)that);
      return false;
    }

    public boolean equals(issueDitkChangeTokens_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueDitkChangeTokens_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueDitkChangeTokens_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueDitkChangeTokens_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueDitkChangeTokens_resultStandardScheme getScheme() {
        return new issueDitkChangeTokens_resultStandardScheme();
      }
    }

    private static class issueDitkChangeTokens_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueDitkChangeTokens_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueDitkChangeTokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Token>(_list50.size);
                  @org.apache.thrift.annotation.Nullable Token _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = new Token();
                    _elem51.read(iprot);
                    struct.success.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueDitkChangeTokens_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Token _iter53 : struct.success)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueDitkChangeTokens_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueDitkChangeTokens_resultTupleScheme getScheme() {
        return new issueDitkChangeTokens_resultTupleScheme();
      }
    }

    private static class issueDitkChangeTokens_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueDitkChangeTokens_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueDitkChangeTokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Token _iter54 : struct.success)
            {
              _iter54.write(oprot);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueDitkChangeTokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Token>(_list55.size);
            @org.apache.thrift.annotation.Nullable Token _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = new Token();
              _elem56.read(iprot);
              struct.success.add(_elem56);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchTokenResult_args implements org.apache.thrift.TBase<fetchTokenResult_args, fetchTokenResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchTokenResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchTokenResult_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REQ_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqMessageId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchTokenResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchTokenResult_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String reqMessageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      REQ_MESSAGE_ID((short)3, "reqMessageId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // REQ_MESSAGE_ID
            return REQ_MESSAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQ_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("reqMessageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchTokenResult_args.class, metaDataMap);
    }

    public fetchTokenResult_args() {
    }

    public fetchTokenResult_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      java.lang.String reqMessageId)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.reqMessageId = reqMessageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchTokenResult_args(fetchTokenResult_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetReqMessageId()) {
        this.reqMessageId = other.reqMessageId;
      }
    }

    public fetchTokenResult_args deepCopy() {
      return new fetchTokenResult_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.reqMessageId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public fetchTokenResult_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public fetchTokenResult_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getReqMessageId() {
      return this.reqMessageId;
    }

    public fetchTokenResult_args setReqMessageId(@org.apache.thrift.annotation.Nullable java.lang.String reqMessageId) {
      this.reqMessageId = reqMessageId;
      return this;
    }

    public void unsetReqMessageId() {
      this.reqMessageId = null;
    }

    /** Returns true if field reqMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqMessageId() {
      return this.reqMessageId != null;
    }

    public void setReqMessageIdIsSet(boolean value) {
      if (!value) {
        this.reqMessageId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case REQ_MESSAGE_ID:
        if (value == null) {
          unsetReqMessageId();
        } else {
          setReqMessageId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case REQ_MESSAGE_ID:
        return getReqMessageId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case REQ_MESSAGE_ID:
        return isSetReqMessageId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchTokenResult_args)
        return this.equals((fetchTokenResult_args)that);
      return false;
    }

    public boolean equals(fetchTokenResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_reqMessageId = true && this.isSetReqMessageId();
      boolean that_present_reqMessageId = true && that.isSetReqMessageId();
      if (this_present_reqMessageId || that_present_reqMessageId) {
        if (!(this_present_reqMessageId && that_present_reqMessageId))
          return false;
        if (!this.reqMessageId.equals(that.reqMessageId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetReqMessageId()) ? 131071 : 524287);
      if (isSetReqMessageId())
        hashCode = hashCode * 8191 + reqMessageId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchTokenResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReqMessageId()).compareTo(other.isSetReqMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqMessageId, other.reqMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchTokenResult_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reqMessageId:");
      if (this.reqMessageId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqMessageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (reqMessageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reqMessageId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchTokenResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchTokenResult_argsStandardScheme getScheme() {
        return new fetchTokenResult_argsStandardScheme();
      }
    }

    private static class fetchTokenResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchTokenResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchTokenResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQ_MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqMessageId = iprot.readString();
                struct.setReqMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchTokenResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.reqMessageId != null) {
          oprot.writeFieldBegin(REQ_MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.reqMessageId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchTokenResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchTokenResult_argsTupleScheme getScheme() {
        return new fetchTokenResult_argsTupleScheme();
      }
    }

    private static class fetchTokenResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchTokenResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchTokenResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        oprot.writeString(struct.reqMessageId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchTokenResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.reqMessageId = iprot.readString();
        struct.setReqMessageIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchTokenResult_result implements org.apache.thrift.TBase<fetchTokenResult_result, fetchTokenResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchTokenResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchTokenResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchTokenResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchTokenResult_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Token> success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchTokenResult_result.class, metaDataMap);
    }

    public fetchTokenResult_result() {
    }

    public fetchTokenResult_result(
      java.util.List<Token> success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchTokenResult_result(fetchTokenResult_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Token> __this__success = new java.util.ArrayList<Token>(other.success.size());
        for (Token other_element : other.success) {
          __this__success.add(new Token(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public fetchTokenResult_result deepCopy() {
      return new fetchTokenResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Token> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Token elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Token>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Token> getSuccess() {
      return this.success;
    }

    public fetchTokenResult_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Token> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public fetchTokenResult_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Token>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchTokenResult_result)
        return this.equals((fetchTokenResult_result)that);
      return false;
    }

    public boolean equals(fetchTokenResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchTokenResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchTokenResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchTokenResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchTokenResult_resultStandardScheme getScheme() {
        return new fetchTokenResult_resultStandardScheme();
      }
    }

    private static class fetchTokenResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchTokenResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchTokenResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Token>(_list58.size);
                  @org.apache.thrift.annotation.Nullable Token _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new Token();
                    _elem59.read(iprot);
                    struct.success.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchTokenResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Token _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchTokenResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchTokenResult_resultTupleScheme getScheme() {
        return new fetchTokenResult_resultTupleScheme();
      }
    }

    private static class fetchTokenResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchTokenResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchTokenResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Token _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchTokenResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Token>(_list63.size);
            @org.apache.thrift.annotation.Nullable Token _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = new Token();
              _elem64.read(iprot);
              struct.success.add(_elem64);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ctsResetTidList_args implements org.apache.thrift.TBase<ctsResetTidList_args, ctsResetTidList_args._Fields>, java.io.Serializable, Cloneable, Comparable<ctsResetTidList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ctsResetTidList_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAN_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("panPattern", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ctsResetTidList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ctsResetTidList_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String messageId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String panPattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      ACCESS_TOKEN((short)2, "accessToken"),
      PAN_PATTERN((short)3, "panPattern");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 3: // PAN_PATTERN
            return PAN_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAN_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("panPattern", org.apache.thrift.TFieldRequirementType.REQUIRED,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ctsResetTidList_args.class, metaDataMap);
    }

    public ctsResetTidList_args() {
    }

    public ctsResetTidList_args(
      java.lang.String messageId,
      java.lang.String accessToken,
      java.lang.String panPattern)
    {
      this();
      this.messageId = messageId;
      this.accessToken = accessToken;
      this.panPattern = panPattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ctsResetTidList_args(ctsResetTidList_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetPanPattern()) {
        this.panPattern = other.panPattern;
      }
    }

    public ctsResetTidList_args deepCopy() {
      return new ctsResetTidList_args(this);
    }

    @Override
    public void clear() {
      this.messageId = null;
      this.accessToken = null;
      this.panPattern = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessageId() {
      return this.messageId;
    }

    public ctsResetTidList_args setMessageId(@org.apache.thrift.annotation.Nullable java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getAccessToken() {
      return this.accessToken;
    }

    public ctsResetTidList_args setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPanPattern() {
      return this.panPattern;
    }

    public ctsResetTidList_args setPanPattern(@org.apache.thrift.annotation.Nullable java.lang.String panPattern) {
      this.panPattern = panPattern;
      return this;
    }

    public void unsetPanPattern() {
      this.panPattern = null;
    }

    /** Returns true if field panPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetPanPattern() {
      return this.panPattern != null;
    }

    public void setPanPatternIsSet(boolean value) {
      if (!value) {
        this.panPattern = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((java.lang.String)value);
        }
        break;

      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((java.lang.String)value);
        }
        break;

      case PAN_PATTERN:
        if (value == null) {
          unsetPanPattern();
        } else {
          setPanPattern((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return getMessageId();

      case ACCESS_TOKEN:
        return getAccessToken();

      case PAN_PATTERN:
        return getPanPattern();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case PAN_PATTERN:
        return isSetPanPattern();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ctsResetTidList_args)
        return this.equals((ctsResetTidList_args)that);
      return false;
    }

    public boolean equals(ctsResetTidList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_panPattern = true && this.isSetPanPattern();
      boolean that_present_panPattern = true && that.isSetPanPattern();
      if (this_present_panPattern || that_present_panPattern) {
        if (!(this_present_panPattern && that_present_panPattern))
          return false;
        if (!this.panPattern.equals(that.panPattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageId()) ? 131071 : 524287);
      if (isSetMessageId())
        hashCode = hashCode * 8191 + messageId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
      if (isSetAccessToken())
        hashCode = hashCode * 8191 + accessToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetPanPattern()) ? 131071 : 524287);
      if (isSetPanPattern())
        hashCode = hashCode * 8191 + panPattern.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ctsResetTidList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPanPattern()).compareTo(other.isSetPanPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPanPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.panPattern, other.panPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ctsResetTidList_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("panPattern:");
      if (this.panPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.panPattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (messageId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'messageId' was not present! Struct: " + toString());
      }
      if (accessToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
      }
      if (panPattern == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'panPattern' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ctsResetTidList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ctsResetTidList_argsStandardScheme getScheme() {
        return new ctsResetTidList_argsStandardScheme();
      }
    }

    private static class ctsResetTidList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ctsResetTidList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ctsResetTidList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAN_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.panPattern = iprot.readString();
                struct.setPanPatternIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ctsResetTidList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.panPattern != null) {
          oprot.writeFieldBegin(PAN_PATTERN_FIELD_DESC);
          oprot.writeString(struct.panPattern);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ctsResetTidList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ctsResetTidList_argsTupleScheme getScheme() {
        return new ctsResetTidList_argsTupleScheme();
      }
    }

    private static class ctsResetTidList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ctsResetTidList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ctsResetTidList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.messageId);
        oprot.writeString(struct.accessToken);
        oprot.writeString(struct.panPattern);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ctsResetTidList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
        struct.panPattern = iprot.readString();
        struct.setPanPatternIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ctsResetTidList_result implements org.apache.thrift.TBase<ctsResetTidList_result, ctsResetTidList_result._Fields>, java.io.Serializable, Cloneable, Comparable<ctsResetTidList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ctsResetTidList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX1_FIELD_DESC = new org.apache.thrift.protocol.TField("ex1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ctsResetTidList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ctsResetTidList_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required
    public @org.apache.thrift.annotation.Nullable ApiException ex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX1((short)1, "ex1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX1
            return EX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX1, new org.apache.thrift.meta_data.FieldMetaData("ex1", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApiException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ctsResetTidList_result.class, metaDataMap);
    }

    public ctsResetTidList_result() {
    }

    public ctsResetTidList_result(
      java.util.List<java.lang.String> success,
      ApiException ex1)
    {
      this();
      this.success = success;
      this.ex1 = ex1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ctsResetTidList_result(ctsResetTidList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetEx1()) {
        this.ex1 = new ApiException(other.ex1);
      }
    }

    public ctsResetTidList_result deepCopy() {
      return new ctsResetTidList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex1 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public ctsResetTidList_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ApiException getEx1() {
      return this.ex1;
    }

    public ctsResetTidList_result setEx1(@org.apache.thrift.annotation.Nullable ApiException ex1) {
      this.ex1 = ex1;
      return this;
    }

    public void unsetEx1() {
      this.ex1 = null;
    }

    /** Returns true if field ex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx1() {
      return this.ex1 != null;
    }

    public void setEx1IsSet(boolean value) {
      if (!value) {
        this.ex1 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case EX1:
        if (value == null) {
          unsetEx1();
        } else {
          setEx1((ApiException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX1:
        return getEx1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX1:
        return isSetEx1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ctsResetTidList_result)
        return this.equals((ctsResetTidList_result)that);
      return false;
    }

    public boolean equals(ctsResetTidList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex1 = true && this.isSetEx1();
      boolean that_present_ex1 = true && that.isSetEx1();
      if (this_present_ex1 || that_present_ex1) {
        if (!(this_present_ex1 && that_present_ex1))
          return false;
        if (!this.ex1.equals(that.ex1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx1()) ? 131071 : 524287);
      if (isSetEx1())
        hashCode = hashCode * 8191 + ex1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ctsResetTidList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx1()).compareTo(other.isSetEx1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex1, other.ex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ctsResetTidList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex1:");
      if (this.ex1 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ctsResetTidList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ctsResetTidList_resultStandardScheme getScheme() {
        return new ctsResetTidList_resultStandardScheme();
      }
    }

    private static class ctsResetTidList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ctsResetTidList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ctsResetTidList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list66.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = iprot.readString();
                    struct.success.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex1 = new ApiException();
                struct.ex1.read(iprot);
                struct.setEx1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ctsResetTidList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter69 : struct.success)
            {
              oprot.writeString(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex1 != null) {
          oprot.writeFieldBegin(EX1_FIELD_DESC);
          struct.ex1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ctsResetTidList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ctsResetTidList_resultTupleScheme getScheme() {
        return new ctsResetTidList_resultTupleScheme();
      }
    }

    private static class ctsResetTidList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ctsResetTidList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ctsResetTidList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter70 : struct.success)
            {
              oprot.writeString(_iter70);
            }
          }
        }
        if (struct.isSetEx1()) {
          struct.ex1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ctsResetTidList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list71.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readString();
              struct.success.add(_elem72);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex1 = new ApiException();
          struct.ex1.read(iprot);
          struct.setEx1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package safariami.manager.prismtoken1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-03")
public class MeterConfigIn implements org.apache.thrift.TBase<MeterConfigIn, MeterConfigIn._Fields>, java.io.Serializable, Cloneable, Comparable<MeterConfigIn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeterConfigIn");

  private static final org.apache.thrift.protocol.TField DRN_FIELD_DESC = new org.apache.thrift.protocol.TField("drn", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EA_FIELD_DESC = new org.apache.thrift.protocol.TField("ea", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField TCT_FIELD_DESC = new org.apache.thrift.protocol.TField("tct", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SGC_FIELD_DESC = new org.apache.thrift.protocol.TField("sgc", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField KRN_FIELD_DESC = new org.apache.thrift.protocol.TField("krn", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField TI_FIELD_DESC = new org.apache.thrift.protocol.TField("ti", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField NEW_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("newConfig", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField ALLOW_KRN_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("allowKrnUpdate", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField KEN_FIELD_DESC = new org.apache.thrift.protocol.TField("ken", org.apache.thrift.protocol.TType.I16, (short)30);
  private static final org.apache.thrift.protocol.TField DOE_FIELD_DESC = new org.apache.thrift.protocol.TField("doe", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField ALLOW3_KCT_FIELD_DESC = new org.apache.thrift.protocol.TField("allow3Kct", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField ALLOW_KEN_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("allowKenUpdate", org.apache.thrift.protocol.TType.BOOL, (short)33);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeterConfigInStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeterConfigInTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String drn; // required
  public short ea; // required
  public short tct; // required
  public int sgc; // required
  public short krn; // required
  public short ti; // required
  public @org.apache.thrift.annotation.Nullable MeterConfigAmendment newConfig; // optional
  public boolean allowKrnUpdate; // optional
  public short ken; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String doe; // optional
  public boolean allow3Kct; // optional
  public boolean allowKenUpdate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DRN((short)1, "drn"),
    EA((short)2, "ea"),
    TCT((short)3, "tct"),
    SGC((short)10, "sgc"),
    KRN((short)11, "krn"),
    TI((short)12, "ti"),
    NEW_CONFIG((short)20, "newConfig"),
    ALLOW_KRN_UPDATE((short)21, "allowKrnUpdate"),
    KEN((short)30, "ken"),
    DOE((short)31, "doe"),
    ALLOW3_KCT((short)32, "allow3Kct"),
    ALLOW_KEN_UPDATE((short)33, "allowKenUpdate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DRN
          return DRN;
        case 2: // EA
          return EA;
        case 3: // TCT
          return TCT;
        case 10: // SGC
          return SGC;
        case 11: // KRN
          return KRN;
        case 12: // TI
          return TI;
        case 20: // NEW_CONFIG
          return NEW_CONFIG;
        case 21: // ALLOW_KRN_UPDATE
          return ALLOW_KRN_UPDATE;
        case 30: // KEN
          return KEN;
        case 31: // DOE
          return DOE;
        case 32: // ALLOW3_KCT
          return ALLOW3_KCT;
        case 33: // ALLOW_KEN_UPDATE
          return ALLOW_KEN_UPDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EA_ISSET_ID = 0;
  private static final int __TCT_ISSET_ID = 1;
  private static final int __SGC_ISSET_ID = 2;
  private static final int __KRN_ISSET_ID = 3;
  private static final int __TI_ISSET_ID = 4;
  private static final int __ALLOWKRNUPDATE_ISSET_ID = 5;
  private static final int __KEN_ISSET_ID = 6;
  private static final int __ALLOW3KCT_ISSET_ID = 7;
  private static final int __ALLOWKENUPDATE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NEW_CONFIG,_Fields.ALLOW_KRN_UPDATE,_Fields.DOE,_Fields.ALLOW3_KCT,_Fields.ALLOW_KEN_UPDATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DRN, new org.apache.thrift.meta_data.FieldMetaData("drn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EA, new org.apache.thrift.meta_data.FieldMetaData("ea", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TCT, new org.apache.thrift.meta_data.FieldMetaData("tct", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SGC, new org.apache.thrift.meta_data.FieldMetaData("sgc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KRN, new org.apache.thrift.meta_data.FieldMetaData("krn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TI, new org.apache.thrift.meta_data.FieldMetaData("ti", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NEW_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("newConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeterConfigAmendment.class)));
    tmpMap.put(_Fields.ALLOW_KRN_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("allowKrnUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEN, new org.apache.thrift.meta_data.FieldMetaData("ken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DOE, new org.apache.thrift.meta_data.FieldMetaData("doe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW3_KCT, new org.apache.thrift.meta_data.FieldMetaData("allow3Kct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALLOW_KEN_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("allowKenUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeterConfigIn.class, metaDataMap);
  }

  public MeterConfigIn() {
    this.allowKrnUpdate = true;

    this.doe = "0000";

    this.allow3Kct = false;

    this.allowKenUpdate = true;

  }

  public MeterConfigIn(
    java.lang.String drn,
    short ea,
    short tct,
    int sgc,
    short krn,
    short ti,
    short ken)
  {
    this();
    this.drn = drn;
    this.ea = ea;
    setEaIsSet(true);
    this.tct = tct;
    setTctIsSet(true);
    this.sgc = sgc;
    setSgcIsSet(true);
    this.krn = krn;
    setKrnIsSet(true);
    this.ti = ti;
    setTiIsSet(true);
    this.ken = ken;
    setKenIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeterConfigIn(MeterConfigIn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDrn()) {
      this.drn = other.drn;
    }
    this.ea = other.ea;
    this.tct = other.tct;
    this.sgc = other.sgc;
    this.krn = other.krn;
    this.ti = other.ti;
    if (other.isSetNewConfig()) {
      this.newConfig = new MeterConfigAmendment(other.newConfig);
    }
    this.allowKrnUpdate = other.allowKrnUpdate;
    this.ken = other.ken;
    if (other.isSetDoe()) {
      this.doe = other.doe;
    }
    this.allow3Kct = other.allow3Kct;
    this.allowKenUpdate = other.allowKenUpdate;
  }

  public MeterConfigIn deepCopy() {
    return new MeterConfigIn(this);
  }

  @Override
  public void clear() {
    this.drn = null;
    setEaIsSet(false);
    this.ea = 0;
    setTctIsSet(false);
    this.tct = 0;
    setSgcIsSet(false);
    this.sgc = 0;
    setKrnIsSet(false);
    this.krn = 0;
    setTiIsSet(false);
    this.ti = 0;
    this.newConfig = null;
    this.allowKrnUpdate = true;

    setKenIsSet(false);
    this.ken = 0;
    this.doe = "0000";

    this.allow3Kct = false;

    this.allowKenUpdate = true;

  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDrn() {
    return this.drn;
  }

  public MeterConfigIn setDrn(@org.apache.thrift.annotation.Nullable java.lang.String drn) {
    this.drn = drn;
    return this;
  }

  public void unsetDrn() {
    this.drn = null;
  }

  /** Returns true if field drn is set (has been assigned a value) and false otherwise */
  public boolean isSetDrn() {
    return this.drn != null;
  }

  public void setDrnIsSet(boolean value) {
    if (!value) {
      this.drn = null;
    }
  }

  public short getEa() {
    return this.ea;
  }

  public MeterConfigIn setEa(short ea) {
    this.ea = ea;
    setEaIsSet(true);
    return this;
  }

  public void unsetEa() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EA_ISSET_ID);
  }

  /** Returns true if field ea is set (has been assigned a value) and false otherwise */
  public boolean isSetEa() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EA_ISSET_ID);
  }

  public void setEaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EA_ISSET_ID, value);
  }

  public short getTct() {
    return this.tct;
  }

  public MeterConfigIn setTct(short tct) {
    this.tct = tct;
    setTctIsSet(true);
    return this;
  }

  public void unsetTct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TCT_ISSET_ID);
  }

  /** Returns true if field tct is set (has been assigned a value) and false otherwise */
  public boolean isSetTct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TCT_ISSET_ID);
  }

  public void setTctIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TCT_ISSET_ID, value);
  }

  public int getSgc() {
    return this.sgc;
  }

  public MeterConfigIn setSgc(int sgc) {
    this.sgc = sgc;
    setSgcIsSet(true);
    return this;
  }

  public void unsetSgc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SGC_ISSET_ID);
  }

  /** Returns true if field sgc is set (has been assigned a value) and false otherwise */
  public boolean isSetSgc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SGC_ISSET_ID);
  }

  public void setSgcIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SGC_ISSET_ID, value);
  }

  public short getKrn() {
    return this.krn;
  }

  public MeterConfigIn setKrn(short krn) {
    this.krn = krn;
    setKrnIsSet(true);
    return this;
  }

  public void unsetKrn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KRN_ISSET_ID);
  }

  /** Returns true if field krn is set (has been assigned a value) and false otherwise */
  public boolean isSetKrn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KRN_ISSET_ID);
  }

  public void setKrnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KRN_ISSET_ID, value);
  }

  public short getTi() {
    return this.ti;
  }

  public MeterConfigIn setTi(short ti) {
    this.ti = ti;
    setTiIsSet(true);
    return this;
  }

  public void unsetTi() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TI_ISSET_ID);
  }

  /** Returns true if field ti is set (has been assigned a value) and false otherwise */
  public boolean isSetTi() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TI_ISSET_ID);
  }

  public void setTiIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TI_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public MeterConfigAmendment getNewConfig() {
    return this.newConfig;
  }

  public MeterConfigIn setNewConfig(@org.apache.thrift.annotation.Nullable MeterConfigAmendment newConfig) {
    this.newConfig = newConfig;
    return this;
  }

  public void unsetNewConfig() {
    this.newConfig = null;
  }

  /** Returns true if field newConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetNewConfig() {
    return this.newConfig != null;
  }

  public void setNewConfigIsSet(boolean value) {
    if (!value) {
      this.newConfig = null;
    }
  }

  public boolean isAllowKrnUpdate() {
    return this.allowKrnUpdate;
  }

  public MeterConfigIn setAllowKrnUpdate(boolean allowKrnUpdate) {
    this.allowKrnUpdate = allowKrnUpdate;
    setAllowKrnUpdateIsSet(true);
    return this;
  }

  public void unsetAllowKrnUpdate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOWKRNUPDATE_ISSET_ID);
  }

  /** Returns true if field allowKrnUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowKrnUpdate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOWKRNUPDATE_ISSET_ID);
  }

  public void setAllowKrnUpdateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOWKRNUPDATE_ISSET_ID, value);
  }

  public short getKen() {
    return this.ken;
  }

  public MeterConfigIn setKen(short ken) {
    this.ken = ken;
    setKenIsSet(true);
    return this;
  }

  public void unsetKen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEN_ISSET_ID);
  }

  /** Returns true if field ken is set (has been assigned a value) and false otherwise */
  public boolean isSetKen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEN_ISSET_ID);
  }

  public void setKenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDoe() {
    return this.doe;
  }

  public MeterConfigIn setDoe(@org.apache.thrift.annotation.Nullable java.lang.String doe) {
    this.doe = doe;
    return this;
  }

  public void unsetDoe() {
    this.doe = null;
  }

  /** Returns true if field doe is set (has been assigned a value) and false otherwise */
  public boolean isSetDoe() {
    return this.doe != null;
  }

  public void setDoeIsSet(boolean value) {
    if (!value) {
      this.doe = null;
    }
  }

  public boolean isAllow3Kct() {
    return this.allow3Kct;
  }

  public MeterConfigIn setAllow3Kct(boolean allow3Kct) {
    this.allow3Kct = allow3Kct;
    setAllow3KctIsSet(true);
    return this;
  }

  public void unsetAllow3Kct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOW3KCT_ISSET_ID);
  }

  /** Returns true if field allow3Kct is set (has been assigned a value) and false otherwise */
  public boolean isSetAllow3Kct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOW3KCT_ISSET_ID);
  }

  public void setAllow3KctIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOW3KCT_ISSET_ID, value);
  }

  public boolean isAllowKenUpdate() {
    return this.allowKenUpdate;
  }

  public MeterConfigIn setAllowKenUpdate(boolean allowKenUpdate) {
    this.allowKenUpdate = allowKenUpdate;
    setAllowKenUpdateIsSet(true);
    return this;
  }

  public void unsetAllowKenUpdate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOWKENUPDATE_ISSET_ID);
  }

  /** Returns true if field allowKenUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowKenUpdate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOWKENUPDATE_ISSET_ID);
  }

  public void setAllowKenUpdateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOWKENUPDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DRN:
      if (value == null) {
        unsetDrn();
      } else {
        setDrn((java.lang.String)value);
      }
      break;

    case EA:
      if (value == null) {
        unsetEa();
      } else {
        setEa((java.lang.Short)value);
      }
      break;

    case TCT:
      if (value == null) {
        unsetTct();
      } else {
        setTct((java.lang.Short)value);
      }
      break;

    case SGC:
      if (value == null) {
        unsetSgc();
      } else {
        setSgc((java.lang.Integer)value);
      }
      break;

    case KRN:
      if (value == null) {
        unsetKrn();
      } else {
        setKrn((java.lang.Short)value);
      }
      break;

    case TI:
      if (value == null) {
        unsetTi();
      } else {
        setTi((java.lang.Short)value);
      }
      break;

    case NEW_CONFIG:
      if (value == null) {
        unsetNewConfig();
      } else {
        setNewConfig((MeterConfigAmendment)value);
      }
      break;

    case ALLOW_KRN_UPDATE:
      if (value == null) {
        unsetAllowKrnUpdate();
      } else {
        setAllowKrnUpdate((java.lang.Boolean)value);
      }
      break;

    case KEN:
      if (value == null) {
        unsetKen();
      } else {
        setKen((java.lang.Short)value);
      }
      break;

    case DOE:
      if (value == null) {
        unsetDoe();
      } else {
        setDoe((java.lang.String)value);
      }
      break;

    case ALLOW3_KCT:
      if (value == null) {
        unsetAllow3Kct();
      } else {
        setAllow3Kct((java.lang.Boolean)value);
      }
      break;

    case ALLOW_KEN_UPDATE:
      if (value == null) {
        unsetAllowKenUpdate();
      } else {
        setAllowKenUpdate((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DRN:
      return getDrn();

    case EA:
      return getEa();

    case TCT:
      return getTct();

    case SGC:
      return getSgc();

    case KRN:
      return getKrn();

    case TI:
      return getTi();

    case NEW_CONFIG:
      return getNewConfig();

    case ALLOW_KRN_UPDATE:
      return isAllowKrnUpdate();

    case KEN:
      return getKen();

    case DOE:
      return getDoe();

    case ALLOW3_KCT:
      return isAllow3Kct();

    case ALLOW_KEN_UPDATE:
      return isAllowKenUpdate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DRN:
      return isSetDrn();
    case EA:
      return isSetEa();
    case TCT:
      return isSetTct();
    case SGC:
      return isSetSgc();
    case KRN:
      return isSetKrn();
    case TI:
      return isSetTi();
    case NEW_CONFIG:
      return isSetNewConfig();
    case ALLOW_KRN_UPDATE:
      return isSetAllowKrnUpdate();
    case KEN:
      return isSetKen();
    case DOE:
      return isSetDoe();
    case ALLOW3_KCT:
      return isSetAllow3Kct();
    case ALLOW_KEN_UPDATE:
      return isSetAllowKenUpdate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MeterConfigIn)
      return this.equals((MeterConfigIn)that);
    return false;
  }

  public boolean equals(MeterConfigIn that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_drn = true && this.isSetDrn();
    boolean that_present_drn = true && that.isSetDrn();
    if (this_present_drn || that_present_drn) {
      if (!(this_present_drn && that_present_drn))
        return false;
      if (!this.drn.equals(that.drn))
        return false;
    }

    boolean this_present_ea = true;
    boolean that_present_ea = true;
    if (this_present_ea || that_present_ea) {
      if (!(this_present_ea && that_present_ea))
        return false;
      if (this.ea != that.ea)
        return false;
    }

    boolean this_present_tct = true;
    boolean that_present_tct = true;
    if (this_present_tct || that_present_tct) {
      if (!(this_present_tct && that_present_tct))
        return false;
      if (this.tct != that.tct)
        return false;
    }

    boolean this_present_sgc = true;
    boolean that_present_sgc = true;
    if (this_present_sgc || that_present_sgc) {
      if (!(this_present_sgc && that_present_sgc))
        return false;
      if (this.sgc != that.sgc)
        return false;
    }

    boolean this_present_krn = true;
    boolean that_present_krn = true;
    if (this_present_krn || that_present_krn) {
      if (!(this_present_krn && that_present_krn))
        return false;
      if (this.krn != that.krn)
        return false;
    }

    boolean this_present_ti = true;
    boolean that_present_ti = true;
    if (this_present_ti || that_present_ti) {
      if (!(this_present_ti && that_present_ti))
        return false;
      if (this.ti != that.ti)
        return false;
    }

    boolean this_present_newConfig = true && this.isSetNewConfig();
    boolean that_present_newConfig = true && that.isSetNewConfig();
    if (this_present_newConfig || that_present_newConfig) {
      if (!(this_present_newConfig && that_present_newConfig))
        return false;
      if (!this.newConfig.equals(that.newConfig))
        return false;
    }

    boolean this_present_allowKrnUpdate = true && this.isSetAllowKrnUpdate();
    boolean that_present_allowKrnUpdate = true && that.isSetAllowKrnUpdate();
    if (this_present_allowKrnUpdate || that_present_allowKrnUpdate) {
      if (!(this_present_allowKrnUpdate && that_present_allowKrnUpdate))
        return false;
      if (this.allowKrnUpdate != that.allowKrnUpdate)
        return false;
    }

    boolean this_present_ken = true;
    boolean that_present_ken = true;
    if (this_present_ken || that_present_ken) {
      if (!(this_present_ken && that_present_ken))
        return false;
      if (this.ken != that.ken)
        return false;
    }

    boolean this_present_doe = true && this.isSetDoe();
    boolean that_present_doe = true && that.isSetDoe();
    if (this_present_doe || that_present_doe) {
      if (!(this_present_doe && that_present_doe))
        return false;
      if (!this.doe.equals(that.doe))
        return false;
    }

    boolean this_present_allow3Kct = true && this.isSetAllow3Kct();
    boolean that_present_allow3Kct = true && that.isSetAllow3Kct();
    if (this_present_allow3Kct || that_present_allow3Kct) {
      if (!(this_present_allow3Kct && that_present_allow3Kct))
        return false;
      if (this.allow3Kct != that.allow3Kct)
        return false;
    }

    boolean this_present_allowKenUpdate = true && this.isSetAllowKenUpdate();
    boolean that_present_allowKenUpdate = true && that.isSetAllowKenUpdate();
    if (this_present_allowKenUpdate || that_present_allowKenUpdate) {
      if (!(this_present_allowKenUpdate && that_present_allowKenUpdate))
        return false;
      if (this.allowKenUpdate != that.allowKenUpdate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDrn()) ? 131071 : 524287);
    if (isSetDrn())
      hashCode = hashCode * 8191 + drn.hashCode();

    hashCode = hashCode * 8191 + ea;

    hashCode = hashCode * 8191 + tct;

    hashCode = hashCode * 8191 + sgc;

    hashCode = hashCode * 8191 + krn;

    hashCode = hashCode * 8191 + ti;

    hashCode = hashCode * 8191 + ((isSetNewConfig()) ? 131071 : 524287);
    if (isSetNewConfig())
      hashCode = hashCode * 8191 + newConfig.hashCode();

    hashCode = hashCode * 8191 + ((isSetAllowKrnUpdate()) ? 131071 : 524287);
    if (isSetAllowKrnUpdate())
      hashCode = hashCode * 8191 + ((allowKrnUpdate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ken;

    hashCode = hashCode * 8191 + ((isSetDoe()) ? 131071 : 524287);
    if (isSetDoe())
      hashCode = hashCode * 8191 + doe.hashCode();

    hashCode = hashCode * 8191 + ((isSetAllow3Kct()) ? 131071 : 524287);
    if (isSetAllow3Kct())
      hashCode = hashCode * 8191 + ((allow3Kct) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAllowKenUpdate()) ? 131071 : 524287);
    if (isSetAllowKenUpdate())
      hashCode = hashCode * 8191 + ((allowKenUpdate) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(MeterConfigIn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDrn()).compareTo(other.isSetDrn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drn, other.drn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEa()).compareTo(other.isSetEa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ea, other.ea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTct()).compareTo(other.isSetTct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tct, other.tct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSgc()).compareTo(other.isSetSgc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSgc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sgc, other.sgc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKrn()).compareTo(other.isSetKrn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKrn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krn, other.krn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTi()).compareTo(other.isSetTi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ti, other.ti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewConfig()).compareTo(other.isSetNewConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newConfig, other.newConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAllowKrnUpdate()).compareTo(other.isSetAllowKrnUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowKrnUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowKrnUpdate, other.allowKrnUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKen()).compareTo(other.isSetKen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ken, other.ken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoe()).compareTo(other.isSetDoe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doe, other.doe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAllow3Kct()).compareTo(other.isSetAllow3Kct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllow3Kct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allow3Kct, other.allow3Kct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAllowKenUpdate()).compareTo(other.isSetAllowKenUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowKenUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowKenUpdate, other.allowKenUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MeterConfigIn(");
    boolean first = true;

    sb.append("drn:");
    if (this.drn == null) {
      sb.append("null");
    } else {
      sb.append(this.drn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ea:");
    sb.append(this.ea);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tct:");
    sb.append(this.tct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sgc:");
    sb.append(this.sgc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("krn:");
    sb.append(this.krn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ti:");
    sb.append(this.ti);
    first = false;
    if (isSetNewConfig()) {
      if (!first) sb.append(", ");
      sb.append("newConfig:");
      if (this.newConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.newConfig);
      }
      first = false;
    }
    if (isSetAllowKrnUpdate()) {
      if (!first) sb.append(", ");
      sb.append("allowKrnUpdate:");
      sb.append(this.allowKrnUpdate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ken:");
    sb.append(this.ken);
    first = false;
    if (isSetDoe()) {
      if (!first) sb.append(", ");
      sb.append("doe:");
      if (this.doe == null) {
        sb.append("null");
      } else {
        sb.append(this.doe);
      }
      first = false;
    }
    if (isSetAllow3Kct()) {
      if (!first) sb.append(", ");
      sb.append("allow3Kct:");
      sb.append(this.allow3Kct);
      first = false;
    }
    if (isSetAllowKenUpdate()) {
      if (!first) sb.append(", ");
      sb.append("allowKenUpdate:");
      sb.append(this.allowKenUpdate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (drn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'drn' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ea' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tct' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sgc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'krn' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ti' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ken' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (newConfig != null) {
      newConfig.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeterConfigInStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeterConfigInStandardScheme getScheme() {
      return new MeterConfigInStandardScheme();
    }
  }

  private static class MeterConfigInStandardScheme extends org.apache.thrift.scheme.StandardScheme<MeterConfigIn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeterConfigIn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DRN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drn = iprot.readString();
              struct.setDrnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EA
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ea = iprot.readI16();
              struct.setEaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TCT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tct = iprot.readI16();
              struct.setTctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SGC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sgc = iprot.readI32();
              struct.setSgcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // KRN
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.krn = iprot.readI16();
              struct.setKrnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TI
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ti = iprot.readI16();
              struct.setTiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NEW_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.newConfig = new MeterConfigAmendment();
              struct.newConfig.read(iprot);
              struct.setNewConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ALLOW_KRN_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowKrnUpdate = iprot.readBool();
              struct.setAllowKrnUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // KEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ken = iprot.readI16();
              struct.setKenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DOE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doe = iprot.readString();
              struct.setDoeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ALLOW3_KCT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allow3Kct = iprot.readBool();
              struct.setAllow3KctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ALLOW_KEN_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowKenUpdate = iprot.readBool();
              struct.setAllowKenUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEa()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ea' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTct()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tct' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSgc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sgc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKrn()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'krn' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTi()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ti' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKen()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ken' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeterConfigIn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.drn != null) {
        oprot.writeFieldBegin(DRN_FIELD_DESC);
        oprot.writeString(struct.drn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EA_FIELD_DESC);
      oprot.writeI16(struct.ea);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TCT_FIELD_DESC);
      oprot.writeI16(struct.tct);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SGC_FIELD_DESC);
      oprot.writeI32(struct.sgc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KRN_FIELD_DESC);
      oprot.writeI16(struct.krn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TI_FIELD_DESC);
      oprot.writeI16(struct.ti);
      oprot.writeFieldEnd();
      if (struct.newConfig != null) {
        if (struct.isSetNewConfig()) {
          oprot.writeFieldBegin(NEW_CONFIG_FIELD_DESC);
          struct.newConfig.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllowKrnUpdate()) {
        oprot.writeFieldBegin(ALLOW_KRN_UPDATE_FIELD_DESC);
        oprot.writeBool(struct.allowKrnUpdate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEN_FIELD_DESC);
      oprot.writeI16(struct.ken);
      oprot.writeFieldEnd();
      if (struct.doe != null) {
        if (struct.isSetDoe()) {
          oprot.writeFieldBegin(DOE_FIELD_DESC);
          oprot.writeString(struct.doe);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllow3Kct()) {
        oprot.writeFieldBegin(ALLOW3_KCT_FIELD_DESC);
        oprot.writeBool(struct.allow3Kct);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllowKenUpdate()) {
        oprot.writeFieldBegin(ALLOW_KEN_UPDATE_FIELD_DESC);
        oprot.writeBool(struct.allowKenUpdate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeterConfigInTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeterConfigInTupleScheme getScheme() {
      return new MeterConfigInTupleScheme();
    }
  }

  private static class MeterConfigInTupleScheme extends org.apache.thrift.scheme.TupleScheme<MeterConfigIn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeterConfigIn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.drn);
      oprot.writeI16(struct.ea);
      oprot.writeI16(struct.tct);
      oprot.writeI32(struct.sgc);
      oprot.writeI16(struct.krn);
      oprot.writeI16(struct.ti);
      oprot.writeI16(struct.ken);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNewConfig()) {
        optionals.set(0);
      }
      if (struct.isSetAllowKrnUpdate()) {
        optionals.set(1);
      }
      if (struct.isSetDoe()) {
        optionals.set(2);
      }
      if (struct.isSetAllow3Kct()) {
        optionals.set(3);
      }
      if (struct.isSetAllowKenUpdate()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNewConfig()) {
        struct.newConfig.write(oprot);
      }
      if (struct.isSetAllowKrnUpdate()) {
        oprot.writeBool(struct.allowKrnUpdate);
      }
      if (struct.isSetDoe()) {
        oprot.writeString(struct.doe);
      }
      if (struct.isSetAllow3Kct()) {
        oprot.writeBool(struct.allow3Kct);
      }
      if (struct.isSetAllowKenUpdate()) {
        oprot.writeBool(struct.allowKenUpdate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeterConfigIn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.drn = iprot.readString();
      struct.setDrnIsSet(true);
      struct.ea = iprot.readI16();
      struct.setEaIsSet(true);
      struct.tct = iprot.readI16();
      struct.setTctIsSet(true);
      struct.sgc = iprot.readI32();
      struct.setSgcIsSet(true);
      struct.krn = iprot.readI16();
      struct.setKrnIsSet(true);
      struct.ti = iprot.readI16();
      struct.setTiIsSet(true);
      struct.ken = iprot.readI16();
      struct.setKenIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.newConfig = new MeterConfigAmendment();
        struct.newConfig.read(iprot);
        struct.setNewConfigIsSet(true);
      }
      if (incoming.get(1)) {
        struct.allowKrnUpdate = iprot.readBool();
        struct.setAllowKrnUpdateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.doe = iprot.readString();
        struct.setDoeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.allow3Kct = iprot.readBool();
        struct.setAllow3KctIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allowKenUpdate = iprot.readBool();
        struct.setAllowKenUpdateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


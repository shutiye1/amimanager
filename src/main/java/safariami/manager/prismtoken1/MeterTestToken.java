/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package safariami.manager.prismtoken1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-03")
public class MeterTestToken implements org.apache.thrift.TBase<MeterTestToken, MeterTestToken._Fields>, java.io.Serializable, Cloneable, Comparable<MeterTestToken> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeterTestToken");

  private static final org.apache.thrift.protocol.TField DRN_FIELD_DESC = new org.apache.thrift.protocol.TField("drn", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAN_FIELD_DESC = new org.apache.thrift.protocol.TField("pan", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenClass", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField SUBCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("subclass", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("control", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField MFRCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mfrcode", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TOKEN_DEC_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenDec", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField TOKEN_HEX_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenHex", org.apache.thrift.protocol.TType.STRING, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeterTestTokenStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeterTestTokenTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String drn; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pan; // required
  public short tokenClass; // required
  public short subclass; // required
  public long control; // required
  public short mfrcode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tokenDec; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tokenHex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DRN((short)1, "drn"),
    PAN((short)2, "pan"),
    TOKEN_CLASS((short)10, "tokenClass"),
    SUBCLASS((short)11, "subclass"),
    CONTROL((short)12, "control"),
    MFRCODE((short)13, "mfrcode"),
    DESCRIPTION((short)20, "description"),
    TOKEN_DEC((short)30, "tokenDec"),
    TOKEN_HEX((short)31, "tokenHex");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DRN
          return DRN;
        case 2: // PAN
          return PAN;
        case 10: // TOKEN_CLASS
          return TOKEN_CLASS;
        case 11: // SUBCLASS
          return SUBCLASS;
        case 12: // CONTROL
          return CONTROL;
        case 13: // MFRCODE
          return MFRCODE;
        case 20: // DESCRIPTION
          return DESCRIPTION;
        case 30: // TOKEN_DEC
          return TOKEN_DEC;
        case 31: // TOKEN_HEX
          return TOKEN_HEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOKENCLASS_ISSET_ID = 0;
  private static final int __SUBCLASS_ISSET_ID = 1;
  private static final int __CONTROL_ISSET_ID = 2;
  private static final int __MFRCODE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DRN, new org.apache.thrift.meta_data.FieldMetaData("drn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAN, new org.apache.thrift.meta_data.FieldMetaData("pan", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_CLASS, new org.apache.thrift.meta_data.FieldMetaData("tokenClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SUBCLASS, new org.apache.thrift.meta_data.FieldMetaData("subclass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CONTROL, new org.apache.thrift.meta_data.FieldMetaData("control", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MFRCODE, new org.apache.thrift.meta_data.FieldMetaData("mfrcode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_DEC, new org.apache.thrift.meta_data.FieldMetaData("tokenDec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN_HEX, new org.apache.thrift.meta_data.FieldMetaData("tokenHex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeterTestToken.class, metaDataMap);
  }

  public MeterTestToken() {
  }

  public MeterTestToken(
    java.lang.String drn,
    java.lang.String pan,
    short tokenClass,
    short subclass,
    long control,
    short mfrcode,
    java.lang.String description,
    java.lang.String tokenDec,
    java.lang.String tokenHex)
  {
    this();
    this.drn = drn;
    this.pan = pan;
    this.tokenClass = tokenClass;
    setTokenClassIsSet(true);
    this.subclass = subclass;
    setSubclassIsSet(true);
    this.control = control;
    setControlIsSet(true);
    this.mfrcode = mfrcode;
    setMfrcodeIsSet(true);
    this.description = description;
    this.tokenDec = tokenDec;
    this.tokenHex = tokenHex;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeterTestToken(MeterTestToken other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDrn()) {
      this.drn = other.drn;
    }
    if (other.isSetPan()) {
      this.pan = other.pan;
    }
    this.tokenClass = other.tokenClass;
    this.subclass = other.subclass;
    this.control = other.control;
    this.mfrcode = other.mfrcode;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetTokenDec()) {
      this.tokenDec = other.tokenDec;
    }
    if (other.isSetTokenHex()) {
      this.tokenHex = other.tokenHex;
    }
  }

  public MeterTestToken deepCopy() {
    return new MeterTestToken(this);
  }

  @Override
  public void clear() {
    this.drn = null;
    this.pan = null;
    setTokenClassIsSet(false);
    this.tokenClass = 0;
    setSubclassIsSet(false);
    this.subclass = 0;
    setControlIsSet(false);
    this.control = 0;
    setMfrcodeIsSet(false);
    this.mfrcode = 0;
    this.description = null;
    this.tokenDec = null;
    this.tokenHex = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDrn() {
    return this.drn;
  }

  public MeterTestToken setDrn(@org.apache.thrift.annotation.Nullable java.lang.String drn) {
    this.drn = drn;
    return this;
  }

  public void unsetDrn() {
    this.drn = null;
  }

  /** Returns true if field drn is set (has been assigned a value) and false otherwise */
  public boolean isSetDrn() {
    return this.drn != null;
  }

  public void setDrnIsSet(boolean value) {
    if (!value) {
      this.drn = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPan() {
    return this.pan;
  }

  public MeterTestToken setPan(@org.apache.thrift.annotation.Nullable java.lang.String pan) {
    this.pan = pan;
    return this;
  }

  public void unsetPan() {
    this.pan = null;
  }

  /** Returns true if field pan is set (has been assigned a value) and false otherwise */
  public boolean isSetPan() {
    return this.pan != null;
  }

  public void setPanIsSet(boolean value) {
    if (!value) {
      this.pan = null;
    }
  }

  public short getTokenClass() {
    return this.tokenClass;
  }

  public MeterTestToken setTokenClass(short tokenClass) {
    this.tokenClass = tokenClass;
    setTokenClassIsSet(true);
    return this;
  }

  public void unsetTokenClass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKENCLASS_ISSET_ID);
  }

  /** Returns true if field tokenClass is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenClass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKENCLASS_ISSET_ID);
  }

  public void setTokenClassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKENCLASS_ISSET_ID, value);
  }

  public short getSubclass() {
    return this.subclass;
  }

  public MeterTestToken setSubclass(short subclass) {
    this.subclass = subclass;
    setSubclassIsSet(true);
    return this;
  }

  public void unsetSubclass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
  }

  /** Returns true if field subclass is set (has been assigned a value) and false otherwise */
  public boolean isSetSubclass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBCLASS_ISSET_ID);
  }

  public void setSubclassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBCLASS_ISSET_ID, value);
  }

  public long getControl() {
    return this.control;
  }

  public MeterTestToken setControl(long control) {
    this.control = control;
    setControlIsSet(true);
    return this;
  }

  public void unsetControl() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONTROL_ISSET_ID);
  }

  /** Returns true if field control is set (has been assigned a value) and false otherwise */
  public boolean isSetControl() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONTROL_ISSET_ID);
  }

  public void setControlIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONTROL_ISSET_ID, value);
  }

  public short getMfrcode() {
    return this.mfrcode;
  }

  public MeterTestToken setMfrcode(short mfrcode) {
    this.mfrcode = mfrcode;
    setMfrcodeIsSet(true);
    return this;
  }

  public void unsetMfrcode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MFRCODE_ISSET_ID);
  }

  /** Returns true if field mfrcode is set (has been assigned a value) and false otherwise */
  public boolean isSetMfrcode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MFRCODE_ISSET_ID);
  }

  public void setMfrcodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MFRCODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public MeterTestToken setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTokenDec() {
    return this.tokenDec;
  }

  public MeterTestToken setTokenDec(@org.apache.thrift.annotation.Nullable java.lang.String tokenDec) {
    this.tokenDec = tokenDec;
    return this;
  }

  public void unsetTokenDec() {
    this.tokenDec = null;
  }

  /** Returns true if field tokenDec is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenDec() {
    return this.tokenDec != null;
  }

  public void setTokenDecIsSet(boolean value) {
    if (!value) {
      this.tokenDec = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTokenHex() {
    return this.tokenHex;
  }

  public MeterTestToken setTokenHex(@org.apache.thrift.annotation.Nullable java.lang.String tokenHex) {
    this.tokenHex = tokenHex;
    return this;
  }

  public void unsetTokenHex() {
    this.tokenHex = null;
  }

  /** Returns true if field tokenHex is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenHex() {
    return this.tokenHex != null;
  }

  public void setTokenHexIsSet(boolean value) {
    if (!value) {
      this.tokenHex = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DRN:
      if (value == null) {
        unsetDrn();
      } else {
        setDrn((java.lang.String)value);
      }
      break;

    case PAN:
      if (value == null) {
        unsetPan();
      } else {
        setPan((java.lang.String)value);
      }
      break;

    case TOKEN_CLASS:
      if (value == null) {
        unsetTokenClass();
      } else {
        setTokenClass((java.lang.Short)value);
      }
      break;

    case SUBCLASS:
      if (value == null) {
        unsetSubclass();
      } else {
        setSubclass((java.lang.Short)value);
      }
      break;

    case CONTROL:
      if (value == null) {
        unsetControl();
      } else {
        setControl((java.lang.Long)value);
      }
      break;

    case MFRCODE:
      if (value == null) {
        unsetMfrcode();
      } else {
        setMfrcode((java.lang.Short)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case TOKEN_DEC:
      if (value == null) {
        unsetTokenDec();
      } else {
        setTokenDec((java.lang.String)value);
      }
      break;

    case TOKEN_HEX:
      if (value == null) {
        unsetTokenHex();
      } else {
        setTokenHex((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DRN:
      return getDrn();

    case PAN:
      return getPan();

    case TOKEN_CLASS:
      return getTokenClass();

    case SUBCLASS:
      return getSubclass();

    case CONTROL:
      return getControl();

    case MFRCODE:
      return getMfrcode();

    case DESCRIPTION:
      return getDescription();

    case TOKEN_DEC:
      return getTokenDec();

    case TOKEN_HEX:
      return getTokenHex();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DRN:
      return isSetDrn();
    case PAN:
      return isSetPan();
    case TOKEN_CLASS:
      return isSetTokenClass();
    case SUBCLASS:
      return isSetSubclass();
    case CONTROL:
      return isSetControl();
    case MFRCODE:
      return isSetMfrcode();
    case DESCRIPTION:
      return isSetDescription();
    case TOKEN_DEC:
      return isSetTokenDec();
    case TOKEN_HEX:
      return isSetTokenHex();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MeterTestToken)
      return this.equals((MeterTestToken)that);
    return false;
  }

  public boolean equals(MeterTestToken that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_drn = true && this.isSetDrn();
    boolean that_present_drn = true && that.isSetDrn();
    if (this_present_drn || that_present_drn) {
      if (!(this_present_drn && that_present_drn))
        return false;
      if (!this.drn.equals(that.drn))
        return false;
    }

    boolean this_present_pan = true && this.isSetPan();
    boolean that_present_pan = true && that.isSetPan();
    if (this_present_pan || that_present_pan) {
      if (!(this_present_pan && that_present_pan))
        return false;
      if (!this.pan.equals(that.pan))
        return false;
    }

    boolean this_present_tokenClass = true;
    boolean that_present_tokenClass = true;
    if (this_present_tokenClass || that_present_tokenClass) {
      if (!(this_present_tokenClass && that_present_tokenClass))
        return false;
      if (this.tokenClass != that.tokenClass)
        return false;
    }

    boolean this_present_subclass = true;
    boolean that_present_subclass = true;
    if (this_present_subclass || that_present_subclass) {
      if (!(this_present_subclass && that_present_subclass))
        return false;
      if (this.subclass != that.subclass)
        return false;
    }

    boolean this_present_control = true;
    boolean that_present_control = true;
    if (this_present_control || that_present_control) {
      if (!(this_present_control && that_present_control))
        return false;
      if (this.control != that.control)
        return false;
    }

    boolean this_present_mfrcode = true;
    boolean that_present_mfrcode = true;
    if (this_present_mfrcode || that_present_mfrcode) {
      if (!(this_present_mfrcode && that_present_mfrcode))
        return false;
      if (this.mfrcode != that.mfrcode)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_tokenDec = true && this.isSetTokenDec();
    boolean that_present_tokenDec = true && that.isSetTokenDec();
    if (this_present_tokenDec || that_present_tokenDec) {
      if (!(this_present_tokenDec && that_present_tokenDec))
        return false;
      if (!this.tokenDec.equals(that.tokenDec))
        return false;
    }

    boolean this_present_tokenHex = true && this.isSetTokenHex();
    boolean that_present_tokenHex = true && that.isSetTokenHex();
    if (this_present_tokenHex || that_present_tokenHex) {
      if (!(this_present_tokenHex && that_present_tokenHex))
        return false;
      if (!this.tokenHex.equals(that.tokenHex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDrn()) ? 131071 : 524287);
    if (isSetDrn())
      hashCode = hashCode * 8191 + drn.hashCode();

    hashCode = hashCode * 8191 + ((isSetPan()) ? 131071 : 524287);
    if (isSetPan())
      hashCode = hashCode * 8191 + pan.hashCode();

    hashCode = hashCode * 8191 + tokenClass;

    hashCode = hashCode * 8191 + subclass;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(control);

    hashCode = hashCode * 8191 + mfrcode;

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetTokenDec()) ? 131071 : 524287);
    if (isSetTokenDec())
      hashCode = hashCode * 8191 + tokenDec.hashCode();

    hashCode = hashCode * 8191 + ((isSetTokenHex()) ? 131071 : 524287);
    if (isSetTokenHex())
      hashCode = hashCode * 8191 + tokenHex.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MeterTestToken other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDrn()).compareTo(other.isSetDrn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drn, other.drn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPan()).compareTo(other.isSetPan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pan, other.pan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenClass()).compareTo(other.isSetTokenClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenClass, other.tokenClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubclass()).compareTo(other.isSetSubclass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubclass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subclass, other.subclass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetControl()).compareTo(other.isSetControl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control, other.control);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMfrcode()).compareTo(other.isSetMfrcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMfrcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mfrcode, other.mfrcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenDec()).compareTo(other.isSetTokenDec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenDec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenDec, other.tokenDec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokenHex()).compareTo(other.isSetTokenHex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenHex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenHex, other.tokenHex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MeterTestToken(");
    boolean first = true;

    sb.append("drn:");
    if (this.drn == null) {
      sb.append("null");
    } else {
      sb.append(this.drn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pan:");
    if (this.pan == null) {
      sb.append("null");
    } else {
      sb.append(this.pan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenClass:");
    sb.append(this.tokenClass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subclass:");
    sb.append(this.subclass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("control:");
    sb.append(this.control);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mfrcode:");
    sb.append(this.mfrcode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenDec:");
    if (this.tokenDec == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenDec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenHex:");
    if (this.tokenHex == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenHex);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (drn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'drn' was not present! Struct: " + toString());
    }
    if (pan == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pan' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'tokenClass' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'subclass' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'control' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mfrcode' because it's a primitive and you chose the non-beans generator.
    if (description == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
    }
    if (tokenDec == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenDec' was not present! Struct: " + toString());
    }
    if (tokenHex == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenHex' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeterTestTokenStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeterTestTokenStandardScheme getScheme() {
      return new MeterTestTokenStandardScheme();
    }
  }

  private static class MeterTestTokenStandardScheme extends org.apache.thrift.scheme.StandardScheme<MeterTestToken> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeterTestToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DRN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drn = iprot.readString();
              struct.setDrnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pan = iprot.readString();
              struct.setPanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOKEN_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.tokenClass = iprot.readI16();
              struct.setTokenClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUBCLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.subclass = iprot.readI16();
              struct.setSubclassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTROL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.control = iprot.readI64();
              struct.setControlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MFRCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.mfrcode = iprot.readI16();
              struct.setMfrcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TOKEN_DEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tokenDec = iprot.readString();
              struct.setTokenDecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TOKEN_HEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tokenHex = iprot.readString();
              struct.setTokenHexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTokenClass()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokenClass' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSubclass()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'subclass' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetControl()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'control' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMfrcode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mfrcode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeterTestToken struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.drn != null) {
        oprot.writeFieldBegin(DRN_FIELD_DESC);
        oprot.writeString(struct.drn);
        oprot.writeFieldEnd();
      }
      if (struct.pan != null) {
        oprot.writeFieldBegin(PAN_FIELD_DESC);
        oprot.writeString(struct.pan);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOKEN_CLASS_FIELD_DESC);
      oprot.writeI16(struct.tokenClass);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBCLASS_FIELD_DESC);
      oprot.writeI16(struct.subclass);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTROL_FIELD_DESC);
      oprot.writeI64(struct.control);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MFRCODE_FIELD_DESC);
      oprot.writeI16(struct.mfrcode);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.tokenDec != null) {
        oprot.writeFieldBegin(TOKEN_DEC_FIELD_DESC);
        oprot.writeString(struct.tokenDec);
        oprot.writeFieldEnd();
      }
      if (struct.tokenHex != null) {
        oprot.writeFieldBegin(TOKEN_HEX_FIELD_DESC);
        oprot.writeString(struct.tokenHex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeterTestTokenTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeterTestTokenTupleScheme getScheme() {
      return new MeterTestTokenTupleScheme();
    }
  }

  private static class MeterTestTokenTupleScheme extends org.apache.thrift.scheme.TupleScheme<MeterTestToken> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeterTestToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.drn);
      oprot.writeString(struct.pan);
      oprot.writeI16(struct.tokenClass);
      oprot.writeI16(struct.subclass);
      oprot.writeI64(struct.control);
      oprot.writeI16(struct.mfrcode);
      oprot.writeString(struct.description);
      oprot.writeString(struct.tokenDec);
      oprot.writeString(struct.tokenHex);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeterTestToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.drn = iprot.readString();
      struct.setDrnIsSet(true);
      struct.pan = iprot.readString();
      struct.setPanIsSet(true);
      struct.tokenClass = iprot.readI16();
      struct.setTokenClassIsSet(true);
      struct.subclass = iprot.readI16();
      struct.setSubclassIsSet(true);
      struct.control = iprot.readI64();
      struct.setControlIsSet(true);
      struct.mfrcode = iprot.readI16();
      struct.setMfrcodeIsSet(true);
      struct.description = iprot.readString();
      struct.setDescriptionIsSet(true);
      struct.tokenDec = iprot.readString();
      struct.setTokenDecIsSet(true);
      struct.tokenHex = iprot.readString();
      struct.setTokenHexIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


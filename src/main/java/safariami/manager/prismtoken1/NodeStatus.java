/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package safariami.manager.prismtoken1;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@jakarta.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-02-03")
public class NodeStatus implements org.apache.thrift.TBase<NodeStatus, NodeStatus._Fields>, java.io.Serializable, Cloneable, Comparable<NodeStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeStatus");

  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField ALERTS_FIELD_DESC = new org.apache.thrift.protocol.TField("alerts", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodeStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodeStatusTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> info; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<Alert> alerts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INFO((short)1, "info"),
    ALERTS((short)2, "alerts");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INFO
          return INFO;
        case 2: // ALERTS
          return ALERTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALERTS, new org.apache.thrift.meta_data.FieldMetaData("alerts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Alert.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeStatus.class, metaDataMap);
  }

  public NodeStatus() {
  }

  public NodeStatus(
    java.util.Map<java.lang.String,java.lang.String> info,
    java.util.List<Alert> alerts)
  {
    this();
    this.info = info;
    this.alerts = alerts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeStatus(NodeStatus other) {
    if (other.isSetInfo()) {
      java.util.Map<java.lang.String,java.lang.String> __this__info = new java.util.HashMap<java.lang.String,java.lang.String>(other.info);
      this.info = __this__info;
    }
    if (other.isSetAlerts()) {
      java.util.List<Alert> __this__alerts = new java.util.ArrayList<Alert>(other.alerts.size());
      for (Alert other_element : other.alerts) {
        __this__alerts.add(new Alert(other_element));
      }
      this.alerts = __this__alerts;
    }
  }

  public NodeStatus deepCopy() {
    return new NodeStatus(this);
  }

  @Override
  public void clear() {
    this.info = null;
    this.alerts = null;
  }

  public int getInfoSize() {
    return (this.info == null) ? 0 : this.info.size();
  }

  public void putToInfo(java.lang.String key, java.lang.String val) {
    if (this.info == null) {
      this.info = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.info.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getInfo() {
    return this.info;
  }

  public NodeStatus setInfo(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  public int getAlertsSize() {
    return (this.alerts == null) ? 0 : this.alerts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Alert> getAlertsIterator() {
    return (this.alerts == null) ? null : this.alerts.iterator();
  }

  public void addToAlerts(Alert elem) {
    if (this.alerts == null) {
      this.alerts = new java.util.ArrayList<Alert>();
    }
    this.alerts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Alert> getAlerts() {
    return this.alerts;
  }

  public NodeStatus setAlerts(@org.apache.thrift.annotation.Nullable java.util.List<Alert> alerts) {
    this.alerts = alerts;
    return this;
  }

  public void unsetAlerts() {
    this.alerts = null;
  }

  /** Returns true if field alerts is set (has been assigned a value) and false otherwise */
  public boolean isSetAlerts() {
    return this.alerts != null;
  }

  public void setAlertsIsSet(boolean value) {
    if (!value) {
      this.alerts = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case ALERTS:
      if (value == null) {
        unsetAlerts();
      } else {
        setAlerts((java.util.List<Alert>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INFO:
      return getInfo();

    case ALERTS:
      return getAlerts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INFO:
      return isSetInfo();
    case ALERTS:
      return isSetAlerts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeStatus)
      return this.equals((NodeStatus)that);
    return false;
  }

  public boolean equals(NodeStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_alerts = true && this.isSetAlerts();
    boolean that_present_alerts = true && that.isSetAlerts();
    if (this_present_alerts || that_present_alerts) {
      if (!(this_present_alerts && that_present_alerts))
        return false;
      if (!this.alerts.equals(that.alerts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInfo()) ? 131071 : 524287);
    if (isSetInfo())
      hashCode = hashCode * 8191 + info.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlerts()) ? 131071 : 524287);
    if (isSetAlerts())
      hashCode = hashCode * 8191 + alerts.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NodeStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAlerts()).compareTo(other.isSetAlerts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlerts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alerts, other.alerts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NodeStatus(");
    boolean first = true;

    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      sb.append(this.info);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alerts:");
    if (this.alerts == null) {
      sb.append("null");
    } else {
      sb.append(this.alerts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (info == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'info' was not present! Struct: " + toString());
    }
    if (alerts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alerts' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeStatusStandardScheme getScheme() {
      return new NodeStatusStandardScheme();
    }
  }

  private static class NodeStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<NodeStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.info = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.info.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALERTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.alerts = new java.util.ArrayList<Alert>(_list4.size);
                @org.apache.thrift.annotation.Nullable Alert _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new Alert();
                  _elem5.read(iprot);
                  struct.alerts.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setAlertsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.info != null) {
        oprot.writeFieldBegin(INFO_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.info.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter7 : struct.info.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            oprot.writeString(_iter7.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.alerts != null) {
        oprot.writeFieldBegin(ALERTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.alerts.size()));
          for (Alert _iter8 : struct.alerts)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeStatusTupleScheme getScheme() {
      return new NodeStatusTupleScheme();
    }
  }

  private static class NodeStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<NodeStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.info.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter9 : struct.info.entrySet())
        {
          oprot.writeString(_iter9.getKey());
          oprot.writeString(_iter9.getValue());
        }
      }
      {
        oprot.writeI32(struct.alerts.size());
        for (Alert _iter10 : struct.alerts)
        {
          _iter10.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.info = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map11.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key12;
        @org.apache.thrift.annotation.Nullable java.lang.String _val13;
        for (int _i14 = 0; _i14 < _map11.size; ++_i14)
        {
          _key12 = iprot.readString();
          _val13 = iprot.readString();
          struct.info.put(_key12, _val13);
        }
      }
      struct.setInfoIsSet(true);
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.alerts = new java.util.ArrayList<Alert>(_list15.size);
        @org.apache.thrift.annotation.Nullable Alert _elem16;
        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
        {
          _elem16 = new Alert();
          _elem16.read(iprot);
          struct.alerts.add(_elem16);
        }
      }
      struct.setAlertsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

